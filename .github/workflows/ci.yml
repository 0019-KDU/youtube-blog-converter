name: Continuous Integration

on:
  push:
    branches: [main, development]
  pull_request:
    branches: [main, development]

# Environment variables for CI
env:
  # Security & Authentication (for testing)
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  SUPADATA_API_KEY: ${{ secrets.SUPADATA_API_KEY }}
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  JWT_ACCESS_TOKEN_EXPIRES: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRES }}
  MONGODB_URI: ${{ secrets.MONGODB_URI }}
  MONGODB_DB_NAME: ${{ secrets.MONGODB_DB_NAME }}
  FLASK_SECRET_KEY: ${{ secrets.FLASK_SECRET_KEY }}

  # Container Registry
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  CONTAINER_REGISTRY: docker.io
  CONTAINER_IMAGE: youtube-blog-converter

  # SonarQube
  SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
  SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
  SONAR_PROJECT_NAME: ${{ vars.SONAR_PROJECT_NAME }}
  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  # Application Settings
  FLASK_DEBUG: "false"
  FLASK_HOST: "0.0.0.0"
  OPENAI_MODEL_NAME: ${{ secrets.OPENAI_MODEL_NAME || 'gpt-3.5-turbo' }}
  GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}

  # Security Scanning
  TRIVY_SEVERITY: "HIGH,CRITICAL"

permissions:
  issues: write
  contents: read
  pull-requests: write
  checks: write
  security-events: write

jobs:
  lint-and-format:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install isort black flake8 bandit safety

      - name: Run isort (import sorting)
        continue-on-error: true
        run: |
          echo "🔄 Checking import sorting..."
          if ! isort --check-only --diff .; then
            echo "::warning title=Import Sorting::Import sorting issues found. Run 'isort .' to fix."
            echo "❌ Import sorting issues found. Run 'isort .' to fix."
          else
            echo "✅ Import sorting is correct"
          fi

      - name: Run Black (code formatting)
        continue-on-error: true
        run: |
          echo "🎨 Checking code formatting..."
          if ! black --check --diff .; then
            echo "::warning title=Code Formatting::Code formatting issues found. Run 'black .' to fix."
            echo "❌ Code formatting issues found. Run 'black .' to fix."
          else
            echo "✅ Code formatting is correct"
          fi

      - name: Run Flake8 (linting)
        continue-on-error: true
        run: |
          echo "🔍 Running linting checks..."

          # Check for critical errors first
          if ! flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics; then
            echo "::warning title=Critical Linting Errors::Critical syntax errors found. Please fix immediately."
          fi

          # Run full linting with warnings only
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics || true

          echo "✅ Linting check completed (warnings may exist)"

      - name: Run Bandit (security linting)
        continue-on-error: true
        run: |
          echo "🔒 Running security linting..."

          # Generate reports (always succeeds)
          bandit -r . -f json -o bandit-report.json || true

          # Run bandit and capture exit code
          if ! bandit -r . -f txt; then
            echo "::warning title=Security Issues::Security issues found by Bandit. Review bandit-report.json for details."
            echo "❌ Security issues found. Check the artifacts for details."
          else
            echo "✅ No security issues found"
          fi

      - name: Run Safety (dependency security)
        continue-on-error: true
        run: |
          echo "🛡️ Checking dependency security..."

          # Generate reports (always succeeds)
          safety check --json --output safety-report.json || true

          # Run safety and capture exit code
          if ! safety check; then
            echo "::warning title=Dependency Vulnerabilities::Vulnerable dependencies found. Review safety-report.json for details."
            echo "❌ Vulnerable dependencies found. Check the artifacts for details."
          else
            echo "✅ No vulnerable dependencies found"
          fi

      - name: Upload Security Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
          retention-days: 30

  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Trivy filesystem security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: "fs"
          scan-ref: "."
          format: "sarif"
          output: "trivy-results.sarif"
          severity: ${{ env.TRIVY_SEVERITY }}

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-results.sarif"

      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: trivy-scan-results
          path: trivy-results.sarif
          retention-days: 30

  build-and-test:
    runs-on: ubuntu-latest
    needs: [lint-and-format]
    services:
      mongo:
        image: mongo:7
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ ping: 1 })'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov pytest-html

      - name: Set up test environment
        run: |
          export MONGODB_URI="mongodb://localhost:27017/test_db"
          export MONGODB_DB_NAME="test_db"
          export FLASK_ENV="testing"
          echo "MONGODB_URI=mongodb://localhost:27017/test_db" >> $GITHUB_ENV
          echo "MONGODB_DB_NAME=test_db" >> $GITHUB_ENV
          echo "FLASK_ENV=testing" >> $GITHUB_ENV

      - name: Wait for MongoDB
        run: |
          for i in {1..30}; do
            if mongosh --eval "db.runCommand({ ping: 1 })" mongodb://localhost:27017/test; then
              echo "MongoDB is ready"
              break
            fi
            echo "Waiting for MongoDB... ($i/30)"
            sleep 2
          done

      - name: Run tests with coverage
        run: |
          echo "🧪 Running test suite with coverage..."
          pytest tests/ -v \
            --cov=app \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --html=pytest-report.html \
            --self-contained-html \
            --tb=short \
            --maxfail=5

      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            pytest-report.html
            htmlcov/
            coverage.xml
          retention-days: 30

  generate-sbom:
    runs-on: ubuntu-latest
    needs: [build-and-test]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Generate SBOM with pip-audit
        run: |
          echo "📋 Generating Software Bill of Materials (SBOM)..."
          pip install pip-audit
          pip-audit --format=json --output=sbom.json
          pip-audit --format=cyclonedx --output=sbom-cyclonedx.json

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom
          path: |
            sbom.json
            sbom-cyclonedx.json
          retention-days: 30

  sonarqube-scan:
    runs-on: self-hosted
    needs: build-and-test
    steps:
      - name: Show commit author
        run: |
          echo "Commit by ${{ github.actor }}"
          echo "Email: ${{ github.event.head_commit.author.email || 'N/A' }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download test results (coverage)
        uses: actions/download-artifact@v4
        with:
          name: test-results
          path: .

      - name: Download security reports
        uses: actions/download-artifact@v4
        with:
          name: security-reports
          path: .

      - name: SonarQube Scan with Quality Gate
        id: sonar-scan
        uses: SonarSource/sonarqube-scan-action@v5.3.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ env.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.python.version=3.12
            -Dsonar.sources=app
            -Dsonar.tests=tests
            -Dsonar.test.inclusions=tests/**
            -Dsonar.exclusions=**/__pycache__/**,**/.pytest_cache/**,**/env/**
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.projectName=${{ env.SONAR_PROJECT_NAME }}
            -Dsonar.projectVersion=1.0.${{ github.run_number }}
            -Dsonar.qualitygate.wait=true
            -Dsonar.scm.provider=git
            -Dsonar.links.scm=${{ github.server_url }}/${{ github.repository }}
            -Dsonar.links.ci=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            -Dsonar.python.bandit.reportPaths=bandit-report.json

      - name: Create Detailed SonarQube PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const comment = `## 📊 SonarQube Code Quality Report

            🔍 **Analysis completed for PR #${prNumber}**

            ### Quality Gate Status
            - **Overall Status:** Analysis completed
            - **Project:** ${{ env.SONAR_PROJECT_NAME }}
            - **Analysis Date:** ${new Date().toISOString()}

            ### Key Metrics
            - **Coverage:** Linked in SonarQube dashboard
            - **Duplications:** Check SonarQube dashboard
            - **Maintainability:** Review code smells
            - **Reliability:** Check bug count
            - **Security:** Review security hotspots

            👉 View full report: ${{ env.SONAR_HOST_URL }}/dashboard?id=${{ env.SONAR_PROJECT_KEY }}

            *This comment was automatically generated by CI/CD.*`;

            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  docker-build:
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test, sonarqube-scan, generate-sbom]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    outputs:
      image-digest: ${{ steps.build.outputs.digest }}
      image-tag: ${{ steps.meta.outputs.tags }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.CONTAINER_REGISTRY }}/${{ secrets.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_IMAGE }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build and push Docker image
        id: build
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          platforms: linux/amd64,linux/arm64

      - name: Run Trivy container security scan
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ steps.meta.outputs.tags }}
          format: "sarif"
          output: "trivy-container-results.sarif"
          severity: ${{ env.TRIVY_SEVERITY }}

      - name: Upload Trivy container scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: "trivy-container-results.sarif"

  # Final CI status check
  ci-status:
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, build-and-test, generate-sbom, sonarqube-scan, docker-build]
    if: always()
    steps:
      - name: Check CI Status
        run: |
          echo "🔍 Checking CI pipeline status..."

          # Check if any required jobs failed
          if [[ "${{ needs.lint-and-format.result }}" == "failure" ]]; then
            echo "❌ Lint and format checks failed"
            exit 1
          fi

          if [[ "${{ needs.security-scan.result }}" == "failure" ]]; then
            echo "❌ Security scan failed"
            exit 1
          fi

          if [[ "${{ needs.build-and-test.result }}" == "failure" ]]; then
            echo "❌ Build and test failed"
            exit 1
          fi

          if [[ "${{ needs.generate-sbom.result }}" == "failure" ]]; then
            echo "❌ SBOM generation failed"
            exit 1
          fi

          # SonarQube and Docker build are conditional, so check if they ran and failed
          if [[ "${{ needs.sonarqube-scan.result }}" == "failure" ]]; then
            echo "❌ SonarQube scan failed"
            exit 1
          fi

          if [[ "${{ needs.docker-build.result }}" == "failure" ]]; then
            echo "❌ Docker build failed"
            exit 1
          fi

          echo "✅ All CI checks passed successfully!"
          echo "🚀 Ready for deployment pipeline"

      - name: CI Summary
        run: |
          echo "## 📊 CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Lint & Format | ${{ needs.lint-and-format.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Security Scan | ${{ needs.security-scan.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Build & Test | ${{ needs.build-and-test.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Generate SBOM | ${{ needs.generate-sbom.result == 'success' && '✅' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| SonarQube Scan | ${{ needs.sonarqube-scan.result == 'success' && '✅' || needs.sonarqube-scan.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build.result == 'success' && '✅' || needs.docker-build.result == 'skipped' && '⏭️' || '❌' }} |" >> $GITHUB_STEP_SUMMARY