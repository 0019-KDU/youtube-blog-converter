name: Auto PR Generation Pipeline

on:
  push:
    branches:
      - 'feature/**'

jobs:
  auto-pr-generation:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Debug - Print branch info
      run: |
        echo "Current branch: ${{ github.ref }}"
        echo "Branch name: ${{ github.ref_name }}"
        echo "Default branch: ${{ github.event.repository.default_branch }}"

    - name: Configure Git remote
      run: |
        git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
        git fetch origin
        git branch -a

    - name: Determine default branch
      id: default-branch
      run: |
        # Try multiple detection methods
        if [ -f .git/refs/remotes/origin/HEAD ]; then
          default_branch=$(awk -F'/' '{print $3}' .git/refs/remotes/origin/HEAD)
        else
          default_branch=$(git remote show origin | grep 'HEAD branch' | cut -d' ' -f5)
        fi
        
        if [ -z "$default_branch" ]; then
          default_branch=$(git rev-parse --abbrev-ref origin/HEAD | sed 's@origin/@@')
        fi
        
        if [ -z "$default_branch" ]; then
          default_branch="main"
        fi
        
        echo "Detected default branch: $default_branch"
        echo "default_branch=$default_branch" >> $GITHUB_OUTPUT

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'

    - name: Install Python dependencies
      run: pip install openai

    - name: Generate PR description
      id: pr-body
      env:
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        BASE_BRANCH: origin/${{ steps.default-branch.outputs.default_branch }}
      run: |
        # Run PR generator and capture output
        echo "Generating PR body..."
        python utils/pr_generator.py > pr_body.txt
        echo "PR body generated successfully"
        
        # Print first 200 chars for debugging
        head -c 200 pr_body.txt
        echo ""
        
        # Properly format for GitHub output
        body_content=$(cat pr_body.txt)
        body_content="${body_content//'%'/'%25'}"
        body_content="${body_content//$'\n'/'%0A'}"
        body_content="${body_content//$'\r'/'%0D'}"
        
        echo "pr_body=$body_content" >> $GITHUB_OUTPUT

    - name: Create automated pull request
      id: create-pr
      uses: peter-evans/create-pull-request@v5
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        title: "Feature: ${{ github.ref_name }}"
        base: ${{ steps.default-branch.outputs.default_branch }}
        body: ${{ steps.pr-body.outputs.pr_body }}
        branch: ${{ github.ref_name }}

    - name: Debug - Print PR result
      run: |
        echo "PR creation status: ${{ steps.create-pr.conclusion }}"
        echo "PR number: ${{ steps.create-pr.outputs.pull-request-number }}"

    - name: Apply 'auto-generated' label
      if: ${{ success() && steps.create-pr.outputs.pull-request-number }}
      uses: actions/github-script@v6
      with:
        script: |
          try {
            console.log('Adding label to PR #${{ steps.create-pr.outputs.pull-request-number }}')
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: ${{ steps.create-pr.outputs.pull-request-number }},
              labels: ['auto-generated']
            })
            console.log('Added auto-generated label to PR')
          } catch (error) {
            console.log('Could not add label:', error.message)
          }