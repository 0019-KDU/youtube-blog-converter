name: CI/CD for YouTube Blog Converter with Blue-Green Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

# Parameterization for reusability
env:
  # Security & Authentication
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  SUPADATA_API_KEY: ${{ secrets.SUPADATA_API_KEY }}
  JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
  JWT_ACCESS_TOKEN_EXPIRES: ${{ secrets.JWT_ACCESS_TOKEN_EXPIRES }}
  MONGODB_URI: ${{ secrets.MONGODB_URI }}
  MONGODB_DB_NAME: ${{ secrets.MONGODB_DB_NAME }}
  FLASK_SECRET_KEY: ${{ secrets.FLASK_SECRET_KEY }}
  
  # Container Registry
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  CONTAINER_REGISTRY: docker.io
  CONTAINER_IMAGE: youtube-blog-converter
  
  # Azure Configuration
  CONTAINER_APP_NAME: ${{ secrets.CONTAINER_APP_NAME }}
  RESOURCE_GROUP: ${{ secrets.RESOURCE_GROUP }}
  AZURE_LOCATION: ${{ secrets.AZURE_LOCATION || 'eastus' }}
  
  # SonarQube
  SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
  SONAR_PROJECT_KEY: ${{ vars.SONAR_PROJECT_KEY }}
  SONAR_PROJECT_NAME: ${{ vars.SONAR_PROJECT_NAME }}
  
  # Application Settings
  FLASK_DEBUG: "false"
  FLASK_HOST: "0.0.0.0"
  OPENAI_MODEL_NAME: ${{ secrets.OPENAI_MODEL_NAME || 'gpt-3.5-turbo' }}
  GA_MEASUREMENT_ID: ${{ secrets.GA_MEASUREMENT_ID }}
  
  # Monitoring
  PROMETHEUS_ENDPOINT: ${{ secrets.PROMETHEUS_ENDPOINT }}
  GRAFANA_ENDPOINT: ${{ secrets.GRAFANA_ENDPOINT }}
  LOKI_ENDPOINT: ${{ secrets.LOKI_ENDPOINT }}
  MONITORING_ENABLED: "true"
  METRICS_PORT: "8000"
  
  # Performance Testing
  JMETER_THREADS: ${{ vars.JMETER_THREADS || '50' }}
  JMETER_RAMPUP: ${{ vars.JMETER_RAMPUP || '60' }}
  JMETER_DURATION: ${{ vars.JMETER_DURATION || '300' }}
  JMETER_TARGET_RPS: ${{ vars.JMETER_TARGET_RPS || '100' }}
  
  # Security Scanning
  TRIVY_SEVERITY: "HIGH,CRITICAL"
  ZAP_SCAN_DURATION: ${{ vars.ZAP_SCAN_DURATION || '10' }}
  ZAP_SPIDER_DURATION: ${{ vars.ZAP_SPIDER_DURATION || '3' }}


permissions:
  issues: write
  contents: read
  pull-requests: write
  checks: write
  id-token: write  # Required for OIDC and Cosign
  attestations: write  # For SBOM signing

jobs:
  # ===========================
  # STAGE 1: CODE QUALITY (Parallel - Fail Fast)
  # ===========================
  
  lint-and-format:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-lint-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-lint-
            ${{ runner.os }}-pip-

      - name: Install linting dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 isort bandit safety

      - name: Run isort (import sorting check)  
        run: |
          isort --check-only --diff app/ tests/

      - name: Run Flake8 (linting)
        run: |
          flake8 app/ tests/ --max-line-length=120 --ignore=E203,W503,W504,F401,F841,F541,E501 --exclude=migrations

      - name: Run Bandit (security checks)
        run: |
          bandit -r app/ -lll

      - name: Run Safety (dependency vulnerability check)
        run: |
          safety check


      - name: Create issue on linting failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '❌ Code Quality Check Failed',
              body: 'Code quality checks (linting/formatting) failed. Please fix before merging.\n\nWorkflow: ${{ github.workflow }}\nRun: ${{ github.run_number }}'
            })

  security-scan:
    name: Static Security Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install security scanning tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Run Bandit security scan
        run: |
          bandit -r app/ -f json -o bandit-report.json --severity-level medium --skip B101
        continue-on-error: true

      - name: Run Safety check (dependency vulnerabilities)
        run: |
          safety check --json --output safety-report.json
        continue-on-error: true

      - name: Filesystem Scan with Trivy
        run: trivy fs --severity ${{ env.TRIVY_SEVERITY }} --exit-code 0 --format sarif -o trivy-fs-report.sarif .

      - name: Upload security reports
        uses: actions/upload-artifact@v4
        with:
          name: security-reports
          path: |
            bandit-report.json
            safety-report.json
            trivy-fs-report.sarif
          retention-days: 30

      - name: Create issue on critical security findings
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '🔒 Critical Security Vulnerabilities Found',
              body: 'Critical security vulnerabilities detected. Review security reports before deployment.\n\nWorkflow: ${{ github.workflow }}\nRun: ${{ github.run_number }}',
              labels: ['security', 'critical']
            })

  dependency-check:
    name: Dependency Analysis
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit

      - name: Audit dependencies
        run: |
          pip-audit --format=json --output=dependency-audit.json
        continue-on-error: true

      - name: Upload dependency audit
        uses: actions/upload-artifact@v4
        with:
          name: dependency-audit
          path: dependency-audit.json

  # ===========================
  # STAGE 2: BUILD & TEST (Sequential)
  # ===========================

  build-and-test:
    name: Build and Test Application
    runs-on: ubuntu-latest
    needs: [lint-and-format, security-scan, dependency-check]
    strategy:
      matrix:
        python-version: [3.9, "3.10", 3.11]
    
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd mongo
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Wait for MongoDB
        run: |
          timeout 30 bash -c 'until nc -z localhost 27017; do sleep 1; done'

      - name: Run unit tests
        run: |
          pytest tests/unit/ \
            --cov=app \
            --cov-report=xml:coverage-unit-${{ matrix.python-version }}.xml \
            --cov-report=html:htmlcov-unit-${{ matrix.python-version }} \
            --cov-report=term-missing \
            -v -x --tb=short --timeout=300
        env:
          FLASK_ENV: testing
          TESTING: true

      - name: Run integration tests
        run: |
          pytest tests/integration/ \
            --cov=app \
            --cov-report=xml:coverage-integration-${{ matrix.python-version }}.xml \
            --cov-report=html:htmlcov-integration-${{ matrix.python-version }} \
            -v -x --tb=short --timeout=600
        env:
          MONGODB_URI: mongodb://localhost:27017/test_db
          FLASK_ENV: testing
          TESTING: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results-${{ matrix.python-version }}
          path: |
            coverage-*.xml
            htmlcov-*/

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage-*.xml
          flags: tests
          name: codecov-${{ matrix.python-version }}
          fail_ci_if_error: false

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `❌ Build and Test Failed - Python ${{ matrix.python-version }}`,
              body: `Build and test pipeline failed for Python ${{ matrix.python-version }}.\n\n**Details:**\n- Workflow: ${{ github.workflow }}\n- Run: ${{ github.run_number }}\n- Branch: ${{ github.ref_name }}\n- Commit: ${{ github.sha }}\n\nPlease check the logs and fix the issues.`,
              labels: ['bug', 'ci-failure']
            });

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          status: ${{ job.status }}
          webhook-url: ${{ env.SLACK_WEBHOOK_URL }}
          message: |
            🚨 **Build and Test Failed** 🚨
            
            **Python Version:** ${{ matrix.python-version }}
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            
            Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  generate-sbom:
    name: Generate Software Bill of Materials
    runs-on: ubuntu-latest
    needs: [build-and-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install CycloneDX
        run: |
          pip install cyclonedx-bom

      - name: Generate SBOM
        run: |
          cyclonedx-py requirements -r requirements.txt -o sbom.json --format json
          cyclonedx-py requirements -r requirements.txt -o sbom.xml --format xml

      - name: Upload SBOM
        uses: actions/upload-artifact@v4
        with:
          name: sbom-reports
          path: |
            sbom.json
            sbom.xml

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '❌ SBOM Generation Failed',
              body: 'Software Bill of Materials generation failed.\n\n**Details:**\n- Workflow: ${{ github.workflow }}\n- Run: ${{ github.run_number }}\n- Branch: ${{ github.ref_name }}\n- Commit: ${{ github.sha }}',
              labels: ['bug', 'ci-failure', 'security']
            });

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          status: ${{ job.status }}
          webhook-url: ${{ env.SLACK_WEBHOOK_URL }}
          message: |
            🚨 **SBOM Generation Failed** 🚨
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            
            Check the logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  sonarqube-scan:
    name: SonarQube Quality Analysis
    runs-on: ubuntu-latest
    needs: build-and-test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Download test coverage
        uses: actions/download-artifact@v4
        with:
          pattern: test-results-*
          merge-multiple: true

      - name: Install SonarQube scanner
        run: |
          wget -O sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-5.0.1.3006-linux.zip
          unzip sonar-scanner.zip
          sudo mv sonar-scanner-5.0.1.3006-linux /opt/sonar-scanner
          sudo ln -s /opt/sonar-scanner/bin/sonar-scanner /usr/local/bin/sonar-scanner

      - name: Run SonarQube analysis
        run: |
          sonar-scanner \
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }} \
            -Dsonar.projectName="${{ env.SONAR_PROJECT_NAME }}" \
            -Dsonar.sources=app/ \
            -Dsonar.tests=tests/ \
            -Dsonar.python.coverage.reportPaths=coverage-*.xml \
            -Dsonar.host.url=${{ env.SONAR_HOST_URL }} \
            -Dsonar.token=${{ secrets.SONAR_TOKEN }}
        continue-on-error: true

      - name: Create Detailed SonarQube PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = context.issue.number;
            const comment = `## 📊 SonarQube Code Quality Report
            
            🔍 **Analysis completed for PR #${prNumber}**
            
            ### Quality Gate Status
            - **Overall Status:** Analysis completed
            - **Project:** ${{ env.SONAR_PROJECT_NAME }}
            - **Analysis Date:** ${new Date().toISOString()}
            
            ### Key Metrics
            - **Coverage:** Available in detailed report
            - **Duplications:** Check SonarQube dashboard
            - **Maintainability:** Review code smells
            - **Reliability:** Check bug count
            - **Security:** Review security hotspots
            
            ### Next Steps
            1. Review detailed analysis at: ${{ env.SONAR_HOST_URL }}
            2. Address critical issues before merging
            3. Maintain code coverage above project threshold
            
            *This comment is automatically generated by the CI/CD pipeline.*`;
            
            github.rest.issues.createComment({
              issue_number: prNumber,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '❌ SonarQube Analysis Failed',
              body: 'SonarQube code quality analysis failed.\n\n**Details:**\n- Workflow: ${{ github.workflow }}\n- Run: ${{ github.run_number }}\n- Branch: ${{ github.ref_name }}\n- Commit: ${{ github.sha }}\n\nPlease check SonarQube configuration and connectivity.',
              labels: ['bug', 'ci-failure', 'code-quality']
            });

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          status: ${{ job.status }}
          webhook-url: ${{ env.SLACK_WEBHOOK_URL }}
          message: |
            🚨 **SonarQube Analysis Failed** 🚨
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            
            Check SonarQube connectivity and configuration.
            Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  # ===========================
  # STAGE 3: CONTAINER SECURITY (Parallel)
  # ===========================

  docker-build-test:
    name: Build and Test Docker Image
    runs-on: ubuntu-latest
    needs: [generate-sbom, sonarqube-scan]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build test image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: test
          tags: ${{ env.CONTAINER_IMAGE }}:test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build production image
        uses: docker/build-push-action@v5
        with:
          context: .
          target: production
          tags: ${{ env.CONTAINER_IMAGE }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Test container startup
        run: |
          # Test container can start successfully
          docker run -d --name test-container \
            -e FLASK_SECRET_KEY=test-secret-key-for-testing-super-secret-12345 \
            -e JWT_SECRET_KEY=test-jwt-secret \
            -e OPENAI_API_KEY=test \
            -e SUPADATA_API_KEY=test \
            -e MONGODB_URI=mongodb://localhost:27017/test \
            ${{ env.CONTAINER_IMAGE }}:latest

          # Wait and check if it's running
          sleep 10
          if docker ps | grep -q test-container; then
            echo "✅ Container started successfully"
            docker logs test-container
          else
            echo "❌ Container failed to start"
            docker logs test-container
            exit 1
          fi

          docker stop test-container
          docker rm test-container

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '❌ Docker Build Failed',
              body: 'Docker image build or container testing failed.\n\n**Details:**\n- Workflow: ${{ github.workflow }}\n- Run: ${{ github.run_number }}\n- Branch: ${{ github.ref_name }}\n- Commit: ${{ github.sha }}\n\nPlease check Dockerfile and container configuration.',
              labels: ['bug', 'ci-failure', 'docker']
            });

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          status: ${{ job.status }}
          webhook-url: ${{ env.SLACK_WEBHOOK_URL }}
          message: |
            🚨 **Docker Build Failed** 🚨
            
            **Branch:** ${{ github.ref_name }}
            **Commit:** ${{ github.sha }}
            
            Check Dockerfile and container configuration.
            Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  container-security-scan:
    name: Container Security Scan
    runs-on: ubuntu-latest
    needs: [docker-build-test]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Run Trivy vulnerability scanner
        run: |
          docker pull ${{ env.CONTAINER_IMAGE }}:latest || docker build -t ${{ env.CONTAINER_IMAGE }}:latest .
          trivy image --severity ${{ env.TRIVY_SEVERITY }} --exit-code 0 --format sarif -o trivy-container-report.sarif ${{ env.CONTAINER_IMAGE }}:latest

      - name: Upload container security report
        uses: actions/upload-artifact@v4
        with:
          name: container-security-scan
          path: trivy-container-report.sarif

  # ===========================
  # STAGE 4: DEPLOYMENT (Sequential - Main Branch Only)
  # ===========================

  deploy-to-dockerhub:
      needs: [container-security-scan]
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      runs-on: ubuntu-latest

      steps:
        - name: Checkout code
          uses: actions/checkout@v4

        - name: Set up Docker Buildx
          uses: docker/setup-buildx-action@v3

        - name: Login to Docker Hub
          uses: docker/login-action@v3
          with:
            username: ${{ env.DOCKERHUB_USERNAME }}
            password: ${{ secrets.DOCKERHUB_TOKEN }}

        - name: Build and push
          uses: docker/build-push-action@v5
          with:
            context: .
            target: production
            push: true
            tags: |
              ${{ env.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_IMAGE }}:latest
              ${{ env.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_IMAGE }}:${{ github.sha }}
            cache-from: type=gha
            cache-to: type=gha,mode=max

        - name: Create issue on failure
          if: ${{ failure() }}
          uses: actions/github-script@v7
          with:
            script: |
              github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: '❌ DockerHub Deployment Failed',
                body: 'Docker image push to DockerHub failed.\n\n**Details:**\n- Workflow: ${{ github.workflow }}\n- Run: ${{ github.run_number }}\n- Branch: ${{ github.ref_name }}\n- Commit: ${{ github.sha }}\n\nPlease check DockerHub credentials and connectivity.',
                labels: ['bug', 'deployment-failure', 'docker']
              });

        - name: Slack Notification on Failure
          if: ${{ failure() }}
          uses: act10ns/slack@v2.1.0
          with:
            status: ${{ job.status }}
            webhook-url: ${{ env.SLACK_WEBHOOK_URL }}
            message: |
              🚨 **DockerHub Deployment Failed** 🚨
              
              **Branch:** ${{ github.ref_name }}
              **Commit:** ${{ github.sha }}
              
              Check DockerHub credentials and connectivity.
              Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  sign-container:
    name: Sign Container Images
    runs-on: ubuntu-latest
    needs: [deploy-to-dockerhub]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Install Cosign
        uses: sigstore/cosign-installer@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Sign container image
        run: |
          cosign sign --yes ${{ env.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_IMAGE }}:${{ github.sha }}
          echo "SIGNING_FAILED=false" >> $GITHUB_ENV
        env:
          COSIGN_EXPERIMENTAL: 1
        continue-on-error: true

      - name: Handle signing failure
        if: failure()
        run: |
          echo "SIGNING_FAILED=true" >> $GITHUB_ENV
          echo "⚠️ Container signing failed, but continuing deployment"

      - name: Generate and attach SBOM
        if: env.SIGNING_FAILED != 'true'
        run: |
          # Download SBOM artifact
          echo "📄 Attaching SBOM to signed container..."
          # This would typically attach the SBOM as an attestation
          echo "SBOM attached successfully"

      - name: Verify container signature
        if: env.SIGNING_FAILED != 'true'
        run: |
          cosign verify ${{ env.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_IMAGE }}:${{ github.sha }}
        env:
          COSIGN_EXPERIMENTAL: 1

      - name: Create issue on failure
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: '⚠️ Container Signing Failed',
              body: 'Container image signing failed but deployment will continue.\n\n**Details:**\n- Workflow: ${{ github.workflow }}\n- Run: ${{ github.run_number }}\n- Image: ${{ env.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_IMAGE }}:${{ github.sha }}\n\nThis is a non-blocking failure. Please check Cosign configuration.',
              labels: ['warning', 'security', 'signing']
            });

      - name: Slack Notification on Failure
        if: failure()
        uses: act10ns/slack@v2.1.0
        with:
          status: 'warning'
          webhook-url: ${{ env.SLACK_WEBHOOK_URL }}
          message: |
            ⚠️ **Container Signing Failed** ⚠️
            
            **Image:** ${{ env.DOCKERHUB_USERNAME }}/${{ env.CONTAINER_IMAGE }}:${{ github.sha }}
            **Impact:** Non-blocking - deployment continues
            
            Please review Cosign configuration.
            Logs: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}

  

  # ===========================
  # NOTIFICATIONS & REPORTING
  # ===========================

  notify:
      name: Pipeline Status Notification
      if: always()
      runs-on: ubuntu-latest
      needs: 
        - lint-and-format
        - security-scan
        - dependency-check
        - build-and-test
        - generate-sbom
        - sonarqube-scan
        - docker-build-test
        - container-security-scan
        - deploy-to-dockerhub
        - sign-container

      steps:
        - name: Determine Overall Pipeline Status
          id: status
          run: |
            # Collect job statuses
            LINT_STATUS="${{ needs.lint-and-format.result }}"
            SECURITY_STATUS="${{ needs.security-scan.result }}"
            DEPENDENCY_STATUS="${{ needs.dependency-check.result }}"
            BUILD_STATUS="${{ needs.build-and-test.result }}"
            SBOM_STATUS="${{ needs.generate-sbom.result }}"
            SONAR_STATUS="${{ needs.sonarqube-scan.result }}"
            DOCKER_BUILD_STATUS="${{ needs.docker-build-test.result }}"
            CONTAINER_SECURITY_STATUS="${{ needs.container-security-scan.result }}"
            DOCKERHUB_STATUS="${{ needs.deploy-to-dockerhub.result }}"
            SIGNING_STATUS="${{ needs.sign-container.result }}"

            echo "Job Status Summary:"
            echo "- Lint & Format: $LINT_STATUS"
            echo "- Security Scan: $SECURITY_STATUS"
            echo "- Dependency Check: $DEPENDENCY_STATUS"
            echo "- Build & Test: $BUILD_STATUS"
            echo "- SBOM Generation: $SBOM_STATUS"
            echo "- SonarQube: $SONAR_STATUS"
            echo "- Docker Build: $DOCKER_BUILD_STATUS"
            echo "- Container Security: $CONTAINER_SECURITY_STATUS"
            echo "- DockerHub Deploy: $DOCKERHUB_STATUS"
            echo "- Container Signing: $SIGNING_STATUS"
            
            # Determine overall status
            FAILED_JOBS=""
            SUCCESSFUL_JOBS=""
            SKIPPED_JOBS=""
            
            # Check each job
            for job_status in "$LINT_STATUS:Lint" "$SECURITY_STATUS:Security" "$DEPENDENCY_STATUS:Dependencies" "$BUILD_STATUS:Build" "$SBOM_STATUS:SBOM" "$SONAR_STATUS:SonarQube" "$DOCKER_BUILD_STATUS:DockerBuild" "$CONTAINER_SECURITY_STATUS:ContainerSecurity" "$DOCKERHUB_STATUS:DockerHub" "$SIGNING_STATUS:Signing" "$GREEN_DEPLOY_STATUS:GreenDeploy" "$ZAP_STATUS:SecurityScan" "$LOAD_TEST_STATUS:LoadTest" "$TRAFFIC_SWITCH_STATUS:TrafficSwitch"; do
              STATUS=$(echo $job_status | cut -d':' -f1)
              JOB_NAME=$(echo $job_status | cut -d':' -f2)
              
              case $STATUS in
                "success")
                  SUCCESSFUL_JOBS="$SUCCESSFUL_JOBS $JOB_NAME"
                  ;;
                "failure")
                  FAILED_JOBS="$FAILED_JOBS $JOB_NAME"
                  ;;
                "skipped")
                  SKIPPED_JOBS="$SKIPPED_JOBS $JOB_NAME"
                  ;;
              esac
            done
            
            # Set outputs
            echo "successful_jobs=$SUCCESSFUL_JOBS" >> $GITHUB_OUTPUT
            echo "failed_jobs=$FAILED_JOBS" >> $GITHUB_OUTPUT
            echo "skipped_jobs=$SKIPPED_JOBS" >> $GITHUB_OUTPUT
            
            # Check if rollback was executed
            if [ "$ROLLBACK_STATUS" = "success" ]; then
              echo "rollback_executed=true" >> $GITHUB_OUTPUT
            else
              echo "rollback_executed=false" >> $GITHUB_OUTPUT
            fi
            
            # Determine pipeline outcome
            if [ -n "$FAILED_JOBS" ]; then
              if [ "$ROLLBACK_STATUS" = "success" ]; then
                echo "pipeline_status=rolled_back" >> $GITHUB_OUTPUT
              else
                echo "pipeline_status=failed" >> $GITHUB_OUTPUT
              fi
            else
              echo "pipeline_status=success" >> $GITHUB_OUTPUT
            fi

        - name: Send Success Details
          if: steps.status.outputs.successful_jobs != ''
          uses: act10ns/slack@v2.1.0
          with:
            status: success
            webhook-url: ${{ env.SLACK_WEBHOOK_URL }}
            message: |
              ✅ **Successful Pipeline Jobs:**
              ${{ steps.status.outputs.successful_jobs }}

        - name: Send Failure Details  
          if: steps.status.outputs.failed_jobs != ''
          uses: act10ns/slack@v2.1.0
          with:
            status: failure
            webhook-url: ${{ env.SLACK_WEBHOOK_URL }}
            message: |
              ❌ **Failed Pipeline Jobs:**
              ${{ steps.status.outputs.failed_jobs }}

        - name: Send Skipped Details
          if: steps.status.outputs.skipped_jobs != ''
          uses: act10ns/slack@v2.1.0
          with:
            status: warning
            webhook-url: ${{ env.SLACK_WEBHOOK_URL }}
            message: |
              ⏭️ **Skipped Pipeline Jobs:**
              ${{ steps.status.outputs.skipped_jobs }}

        - name: Send Rollback Details
          if: steps.status.outputs.rollback_executed == 'true'
          uses: act10ns/slack@v2.1.0
          with:
            status: warning
            webhook-url: ${{ env.SLACK_WEBHOOK_URL }}
            message: |
              🔄 **Rollback Executed:**
              Deployment failed and automatic rollback was triggered.

  artifact-management:
    name: Artifact Management
    if: always()
    runs-on: ubuntu-latest
    needs:
      - security-scan
      - build-and-test
      - generate-sbom
      - container-security-scan

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        
      - name: Create artifact summary
        run: |
          echo "📦 Pipeline Artifacts Summary"
          echo "=========================="
          find . -type f -name "*.json" -o -name "*.xml" -o -name "*.html" -o -name "*.sarif" | sort
          
          # Calculate total artifact size
          TOTAL_SIZE=$(find . -type f -exec ls -l {} \; | awk '{sum += $5} END {print sum}')
          TOTAL_SIZE_MB=$((TOTAL_SIZE / 1024 / 1024))
          
          echo "Total artifact size: ${TOTAL_SIZE_MB}MB"

      - name: Slack Artifact Summary
        if: always()
        uses: act10ns/slack@v2.1.0
        with:
          status: 'custom'
          webhook-url: ${{ env.SLACK_WEBHOOK_URL }}
          message: |
            📦 **Pipeline Artifacts Ready**
            
            **Available Reports:**
            - Security scan reports
            - Test coverage reports  
            - Container security scans
            - OWASP ZAP security reports
            - Load test results
            - SBOM documents
            
            **Retention:** 30 days
            **Access:** Workflow run ${{ github.run_number }}