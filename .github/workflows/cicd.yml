name: CI/CD for YouTube Blog Converter with Blue-Green Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  issues: write
  contents: read
  pull-requests: write
  checks: write
  id-token: write  # Required for OIDC

env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Show commit author
        run: |
          echo "Commit by ${{ github.actor }}"
          echo "Email: ${{ github.event.head_commit.author.email || 'N/A' }}"
          echo "Full details: ${{ toJson(github.event.head_commit.author) }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Filesystem Scan with Trivy
        run: trivy fs --severity HIGH,CRITICAL --exit-code 0 .

      - name: Install Gitleaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.2_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/
          rm gitleaks_8.18.2_linux_x64.tar.gz

      - name: Secret Detection with Gitleaks
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
            echo "Scanning PR commits against base branch: $BASE_BRANCH"
            git fetch origin "$BASE_BRANCH" --depth=100
            BASE_COMMIT=$(git merge-base "origin/$BASE_BRANCH" HEAD)
            RANGE="$BASE_COMMIT..HEAD"
          elif [ "${{ github.event_name }}" = "push" ]; then
            echo "Scanning push event commits"
            if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              RANGE="${{ github.event.before }}..${{ github.event.after }}"
            else
              RANGE="${{ github.event.after }}"
            fi
          else
            echo "Unsupported event type: ${{ github.event_name }}"
            exit 1
          fi

          echo "Scanning commit range: $RANGE"
          gitleaks detect \
            --source . \
            --report-format json \
            --report-path gitleaks-report.json \
            --log-opts "$RANGE"

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const assignee = "${{ github.actor }}";
              const authorName = "${{ github.event.head_commit.author.name }}";
              const authorEmail = "${{ github.event.head_commit.author.email }}";
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Security Scan Failure in ${context.job}`,
                body: `### ❌ Security Scan Failed\n\n` +
                      `**Job:** ${context.job}\n` +
                      `**Commit:** [${context.sha.substring(0,7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})\n` +
                      `**Workflow:** [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                      `**Commit Author:** ${authorName} (${authorEmail})\n\n` +
                      `Please investigate the security scan failure.`,
                assignees: [assignee],
                labels: ['ci-failure', 'security']
              });
            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
            }

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: ${{ job.status }}
          text: "❌ Security Scan Failed in ${{ github.repository }}"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Workflow", "value": "${{ github.workflow }}", "short": true},
              {"title": "Job", "value": "${{ github.job }}", "short": true},
              {"title": "Run ID", "value": "${{ github.run_id }}", "short": true},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true},
              {"title": "Commit Author", "value": "${{ github.event.head_commit.author.name }}", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

  build-and-test:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      SUPADATA_API_KEY: ${{ secrets.SUPADATA_API_KEY }}
    steps:
      - name: Show commit author
        run: |
          echo "Commit by ${{ github.actor }}"
          echo "Email: ${{ github.event.head_commit.author.email || 'N/A' }}"
          echo "Full details: ${{ toJson(github.event.head_commit.author) }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run tests with coverage
        env:
          TESTING: true
          FLASK_ENV: testing
          CI: true
          LOG_TO_FILE: false
          LOG_LEVEL: DEBUG
        run: pytest --cov=src --cov-report=xml:coverage.xml -v tests/
        
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const assignee = "${{ github.actor }}";
              const authorName = "${{ github.event.head_commit.author.name }}";
              const authorEmail = "${{ github.event.head_commit.author.email }}";
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Build/Tests Failed in ${context.job}`,
                body: `### ❌ Build/Tests Failed\n\n` +
                      `**Job:** ${context.job}\n` +
                      `**Commit:** [${context.sha.substring(0,7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})\n` +
                      `**Workflow:** [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                      `**Commit Author:** ${authorName} (${authorEmail})\n\n` +
                      `Test failures detected. Please check the build logs.`,
                assignees: [assignee],
                labels: ['ci-failure', 'tests']
              });
            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
            }

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: ${{ job.status }}
          text: "❌ Build/Tests Failed in ${{ github.repository }}"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Workflow", "value": "${{ github.workflow }}", "short": true},
              {"title": "Job", "value": "${{ github.job }}", "short": true},
              {"title": "Run ID", "value": "${{ github.run_id }}", "short": true},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true},
              {"title": "Commit Author", "value": "${{ github.event.head_commit.author.name }}", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

  sonarqube-scan:
    runs-on: self-hosted
    needs: build-and-test
    steps:
      - name: Show commit author
        run: |
          echo "Commit by ${{ github.actor }}"
          echo "Email: ${{ github.event.head_commit.author.email || 'N/A' }}"
          echo "Full details: ${{ toJson(github.event.head_commit.author) }}"
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: .
          
      - name: SonarQube Scan
        id: sonar-scan
        uses: SonarSource/sonarqube-scan-action@v5.3.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.python.version=3.12
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.test.inclusions=tests/**
            -Dsonar.exclusions=**/__pycache__/**,**/.pytest_cache/**,**/env/**
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
            -Dsonar.projectName=${{ vars.SONAR_PROJECT_NAME }}
            -Dsonar.projectVersion=1.0.${{ github.run_number }}
            -Dsonar.qualitygate.wait=true
            -Dsonar.scm.provider=git
            -Dsonar.links.scm=${{ github.server_url }}/${{ github.repository }}
            -Dsonar.links.ci=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
      - name: SonarQube Quality Gate check
        id: sonar-quality-gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: Create Detailed SonarQube PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const sonarUrl = '${{ vars.SONAR_HOST_URL }}';
            const projectKey = '${{ vars.SONAR_PROJECT_KEY }}';
            const token = '${{ secrets.SONAR_TOKEN }}';
            
            try {
              // Create Basic Auth header - SonarQube uses token as username with empty password
              const auth = Buffer.from(`${token}:`).toString('base64');
              
              // Get project measures from SonarQube API
              const metricsResponse = await fetch(
                `${sonarUrl}/api/measures/component?component=${projectKey}&metricKeys=bugs,vulnerabilities,security_hotspots,code_smells,coverage,duplicated_lines_density,ncloc,sqale_rating,reliability_rating,security_rating`,
                {
                  headers: {
                    'Authorization': `Basic ${auth}`,
                    'Content-Type': 'application/json'
                  }
                }
              );
              
              if (!metricsResponse.ok) {
                const errorText = await metricsResponse.text();
                throw new Error(`SonarQube API error: ${metricsResponse.status} - ${errorText}`);
              }
              
              const metricsData = await metricsResponse.json();
              const measures = metricsData.component.measures;
              
              // Get Quality Gate status
              const qualityGateResponse = await fetch(
                `${sonarUrl}/api/qualitygates/project_status?projectKey=${projectKey}`,
                {
                  headers: {
                    'Authorization': `Basic ${auth}`,
                    'Content-Type': 'application/json'
                  }
                }
              );
              
              if (!qualityGateResponse.ok) {
                const errorText = await qualityGateResponse.text();
                throw new Error(`SonarQube Quality Gate API error: ${qualityGateResponse.status} - ${errorText}`);
              }
              
              const qualityGateData = await qualityGateResponse.json();
              const qualityGateStatus = qualityGateData.projectStatus.status;
              
              // Helper function to get metric value
              function getMetricValue(metricKey) {
                const measure = measures.find(m => m.metric === metricKey);
                return measure ? measure.value : 'N/A';
              }
              
              // Helper function to get rating emoji
              function getRatingEmoji(rating) {
                switch(rating) {
                  case 'A': return '🟢';
                  case 'B': return '🟡';
                  case 'C': return '🟠';
                  case 'D': return '🔴';
                  case 'E': return '🔴';
                  default: return '⚪';
                }
              }
              
              // Create detailed comment body using string concatenation
              const statusSection = qualityGateStatus === 'OK' ? '✅ **PASSED**' : '❌ **FAILED**';
              
              const metricsTable = [
                '| Metric | Value | Rating |',
                '|--------|-------|--------|',
                `| 🐛 **Bugs** | ${getMetricValue('bugs')} | ${getRatingEmoji(getMetricValue('reliability_rating'))} |`,
                `| 🔒 **Vulnerabilities** | ${getMetricValue('vulnerabilities')} | ${getRatingEmoji(getMetricValue('security_rating'))} |`,
                `| 🔥 **Security Hotspots** | ${getMetricValue('security_hotspots')} | - |`,
                `| 💨 **Code Smells** | ${getMetricValue('code_smells')} | ${getRatingEmoji(getMetricValue('sqale_rating'))} |`,
                `| 📏 **Lines of Code** | ${getMetricValue('ncloc')} | - |`,
                `| 🧪 **Coverage** | ${getMetricValue('coverage')}% | - |`,
                `| 📋 **Duplicated Lines** | ${getMetricValue('duplicated_lines_density')}% | - |`
              ].join('\n');
              
              const linksSection = [
                '### 🔗 Links',
                `- [📊 View Full Report](${sonarUrl}/dashboard?id=${projectKey})`,
                `- [🔍 View Issues](${sonarUrl}/project/issues?resolved=false&id=${projectKey})`,
                `- [📈 View Measures](${sonarUrl}/component_measures?id=${projectKey})`
              ].join('\n');
              
              const detailsSection = [
                '### ℹ️ Analysis Details',
                `- **Project Key**: \`${projectKey}\``,
                `- **Analysis Date**: ${new Date().toISOString()}`,
                `- **Commit**: \`${context.sha.substring(0, 7)}\``,
                `- **Workflow Run**: [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
              ].join('\n');
              
              const commentBody = [
                '## 📊 SonarQube Analysis Results',
                '',
                '### Quality Gate Status',
                statusSection,
                '',
                '### 📈 Code Quality Metrics',
                '',
                metricsTable,
                '',
                linksSection,
                '',
                detailsSection,
                '',
                '---',
                '*This comment was automatically generated by SonarQube analysis in GitHub Actions*'
              ].join('\n');
              
              // Post comment to PR
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              
              console.log('Successfully posted SonarQube analysis results to PR');
              
            } catch (error) {
              console.error('Error creating SonarQube PR comment:', error);
              core.setFailed(`Failed to create PR comment: ${error.message}`);
            }

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const assignee = "${{ github.actor }}";
              const authorName = "${{ github.event.head_commit.author.name }}";
              const authorEmail = "${{ github.event.head_commit.author.email }}";
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `SonarQube Failure in ${context.job}`,
                body: `### ❌ SonarQube Quality Gate Failed\n\n` +
                      `**Job:** ${context.job}\n` +
                      `**Commit:** [${context.sha.substring(0,7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})\n` +
                      `**Workflow:** [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                      `**Commit Author:** ${authorName} (${authorEmail})\n\n` +
                      `Quality gate check failed. Please review SonarQube analysis.`,
                assignees: [assignee],
                labels: ['ci-failure', 'quality']
              });
            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
            }

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: ${{ job.status }}
          text: "❌ SonarQube Scan Failed in ${{ github.repository }}"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Workflow", "value": "${{ github.workflow }}", "short": true},
              {"title": "Job", "value": "${{ github.job }}", "short": true},
              {"title": "Run ID", "value": "${{ github.run_id }}", "short": true},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true},
              {"title": "Commit Author", "value": "${{ github.event.head_commit.author.name }}", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

  docker-build-test:
    needs: [security-scan, build-and-test, sonarqube-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Show commit author
        run: |
          echo "Commit by ${{ github.actor }}"
          echo "Email: ${{ github.event.head_commit.author.email || 'N/A' }}"
          echo "Full details: ${{ toJson(github.event.head_commit.author) }}"
        
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Trivy (for container scanning)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Build Docker image
        run: docker build -t youtube-blog-converter:${{ github.sha }} .

      - name: Container Vulnerability Scan with Trivy
        run: trivy image --severity HIGH,CRITICAL --exit-code 0 youtube-blog-converter:${{ github.sha }}
      
      - name: Run smoke test
        run: |
          docker run -d --name smoke-test \
            -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            -e SUPADATA_API_KEY="${{ secrets.SUPADATA_API_KEY }}" \
            -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            -e JWT_ACCESS_TOKEN_EXPIRES="${{ secrets.JWT_ACCESS_TOKEN_EXPIRES }}" \
            -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
            -e MONGODB_DB_NAME="${{ secrets.MONGODB_DB_NAME }}" \
            -e FLASK_SECRET_KEY="${{ secrets.FLASK_SECRET_KEY }}" \
            -e FLASK_DEBUG="false" \
            -e FLASK_HOST="0.0.0.0" \
            -e OPENAI_MODEL_NAME="${{ secrets.OPENAI_MODEL_NAME }}" \
            -e GA_MEASUREMENT_ID="${{ secrets.GA_MEASUREMENT_ID }}" \
            -e PROMETHEUS_ENDPOINT="${{ secrets.PROMETHEUS_ENDPOINT }}" \
            -e GRAFANA_ENDPOINT="${{ secrets.GRAFANA_ENDPOINT }}" \
            -e LOKI_ENDPOINT="${{ secrets.LOKI_ENDPOINT }}" \
            -e MONITORING_ENABLED="true" \
            -e METRICS_PORT="8000" \
            -p 5000:5000 \
            youtube-blog-converter:${{ github.sha }}
          # wait for Flask to boot
          for i in {1..10}; do
            docker logs smoke-test 2>&1 | grep -q "Running on" && break
            sleep 2
          done
          docker logs smoke-test
          curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:5000/
          docker stop smoke-test

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const assignee = "${{ github.actor }}";
              const authorName = "${{ github.event.head_commit.author.name }}";
              const authorEmail = "${{ github.event.head_commit.author.email }}";
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Docker Build Failed in ${context.job}`,
                body: `### ❌ Docker Build/Test Failed\n\n` +
                      `**Job:** ${context.job}\n` +
                      `**Commit:** [${context.sha.substring(0,7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})\n` +
                      `**Workflow:** [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                      `**Commit Author:** ${authorName} (${authorEmail})\n\n` +
                      `Docker build or smoke test failed. Please check container logs.`,
                assignees: [assignee],
                labels: ['ci-failure', 'docker']
              });
            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
            }

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: ${{ job.status }}
          text: "❌ Docker Build Failed in ${{ github.repository }}"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Workflow", "value": "${{ github.workflow }}", "short": true},
              {"title": "Job", "value": "${{ github.job }}", "short": true},
              {"title": "Run ID", "value": "${{ github.run_id }}", "short": true},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true},
              {"title": "Commit Author", "value": "${{ github.event.head_commit.author.name }}", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

  deploy-to-dockerhub:
    needs: docker-build-test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Show commit author
        run: |
          echo "Commit by ${{ github.actor }}"
          echo "Email: ${{ github.event.head_commit.author.email || 'N/A' }}"
          echo "Full details: ${{ toJson(github.event.head_commit.author) }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/youtube-blog-converter:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/youtube-blog-converter:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify deployment
        run: |
          echo "Successfully deployed to Docker Hub!"
          echo "Image: ${{ secrets.DOCKERHUB_USERNAME }}/youtube-blog-converter:${{ github.sha }}"

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const assignee = "${{ github.actor }}";
              const authorName = "${{ github.event.head_commit.author.name }}";
              const authorEmail = "${{ github.event.head_commit.author.email }}";
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Deployment Failed in ${context.job}`,
                body: `### ❌ Deployment to Docker Hub Failed\n\n` +
                      `**Job:** ${context.job}\n` +
                      `**Commit:** [${context.sha.substring(0,7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})\n` +
                      `**Workflow:** [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                      `**Commit Author:** ${authorName} (${authorEmail})\n\n` +
                      `Deployment to Docker Hub failed. Please check build logs.`,
                assignees: [assignee],
                labels: ['ci-failure', 'deployment']
              });
            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
            }

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: ${{ job.status }}
          text: "❌ Deployment Failed in ${{ github.repository }}"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Workflow", "value": "${{ github.workflow }}", "short": true},
              {"title": "Job", "value": "${{ github.job }}", "short": true},
              {"title": "Run ID", "value": "${{ github.run_id }}", "short": true},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true},
              {"title": "Commit Author", "value": "${{ github.event.head_commit.author.name }}", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

  deploy-to-azure:
    needs: deploy-to-dockerhub
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    environment: production
    concurrency: production

    steps:
      - name: Show commit author
        run: |
          echo "Commit by ${{ github.actor }}"
          echo "Email: ${{ github.event.head_commit.author.email || 'N/A' }}"
          echo "Full details: ${{ toJson(github.event.head_commit.author) }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Update Azure CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y azure-cli
          az extension add --name containerapp --upgrade

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure Docker Hub registry
        run: |
          echo "🔄 Removing existing Docker registry config (if any)…"
          az containerapp registry remove \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --server docker.io || true

          echo "➕ Adding Docker Hub registry…"
          az containerapp registry set \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --server docker.io \
            --username ${{ secrets.DOCKERHUB_USERNAME }} \
            --password ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Get Container App information
        id: get-container-info
        run: |
          echo "🔍 Getting Container App details..."
          CONTAINER_NAME=$(az containerapp show \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --query "properties.template.containers[0].name" \
            --output tsv)
          
          if [ -z "$CONTAINER_NAME" ] || [ "$CONTAINER_NAME" = "null" ]; then
            echo "❌ Failed to get container name. Using 'ytblogger' as fallback."
            CONTAINER_NAME="ytblogger"
          fi
          
          echo "container_name=$CONTAINER_NAME" >> $GITHUB_OUTPUT
          echo "✅ Found container name: $CONTAINER_NAME"

      - name: Enable multiple revisions mode
        run: |
          echo "🔧 Ensuring multiple revisions mode..."
          az containerapp update \
            -g ${{ secrets.RESOURCE_GROUP }} \
            -n ${{ secrets.CONTAINER_APP_NAME }} \
            --revisions-mode multiple

      - name: Get current production revision (BLUE)
        id: get-blue
        run: |
          BLUE_REVISION=$(az containerapp revision list \
            -g ${{ secrets.RESOURCE_GROUP }} \
            -n ${{ secrets.CONTAINER_APP_NAME }} \
            --query "[?properties.active].name | [0]" \
            -o tsv)
          echo "blue_revision=$BLUE_REVISION" >> $GITHUB_OUTPUT
          echo "🔵 Current BLUE revision: $BLUE_REVISION"

      - name: Deploy GREEN revision
        id: deploy-green
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          echo "🟢 Deploying GREEN revision (commit: $SHORT_SHA)"
          
          az containerapp update \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --container-name ${{ steps.get-container-info.outputs.container_name }} \
            --image ${{ secrets.DOCKERHUB_USERNAME }}/youtube-blog-converter:${{ github.sha }} \
            --revision-suffix "green-$SHORT_SHA" \
            --no-traffic \
            --output table

      - name: Get GREEN revision details
        id: get-green
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c1-7)
          GREEN_REVISION=$(az containerapp revision list \
            -g ${{ secrets.RESOURCE_GROUP }} \
            -n ${{ secrets.CONTAINER_APP_NAME }} \
            --query "[?ends_with(name, 'green-$SHORT_SHA')].name | [0]" \
            -o tsv)
          
          if [ -z "$GREEN_REVISION" ]; then
            echo "❌ Failed to get GREEN revision"
            exit 1
          fi
          
          echo "green_revision=$GREEN_REVISION" >> $GITHUB_OUTPUT
          
          GREEN_FQDN=$(az containerapp revision show \
            -g ${{ secrets.RESOURCE_GROUP }} \
            -n ${{ secrets.CONTAINER_APP_NAME }} \
            --revision $GREEN_REVISION \
            --query "properties.fqdn" \
            -o tsv)
          
          echo "green_fqdn=$GREEN_FQDN" >> $GITHUB_OUTPUT
          echo "🟢 GREEN revision: $GREEN_REVISION"
          echo "🌐 GREEN FQDN: $GREEN_FQDN"

      - name: Wait for GREEN revision to be ready
        run: |
          echo "⏳ Waiting for GREEN revision to stabilize..."
          sleep 30
          
          for i in {1..10}; do
            REVISION_STATUS=$(az containerapp revision show \
              --revision ${{ steps.get-green.outputs.green_revision }} \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --query "properties.provisioningState" \
              --output tsv 2>/dev/null || echo "Unknown")
            
            echo "Revision status: $REVISION_STATUS (attempt $i/10)"
            
            if [ "$REVISION_STATUS" = "Succeeded" ]; then
              echo "✅ Revision is ready!"
              break
            elif [ "$REVISION_STATUS" = "Failed" ]; then
              echo "❌ Revision deployment failed!"
              az containerapp revision show \
                --revision ${{ steps.get-green.outputs.green_revision }} \
                --resource-group ${{ secrets.RESOURCE_GROUP }} \
                --query "{name: name, status: properties.provisioningState, replicas: properties.replicas}" \
                --output table
              exit 1
            fi
            sleep 15
          done

      - name: Test GREEN revision health
        run: |
          echo "🩺 Testing GREEN revision health at ${{ steps.get-green.outputs.green_fqdn }}"
          for i in {1..8}; do
            echo "Health check attempt $i/8..."
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "https://${{ steps.get-green.outputs.green_fqdn }}/health" || echo "000")
            
            if [[ $HTTP_STATUS == "200" ]]; then
              echo "✅ GREEN revision healthy (Status: $HTTP_STATUS)"
              exit 0
            else
              echo "⚠️ Health check failed with status: $HTTP_STATUS (attempt $i/8)"
              if [ $i -eq 8 ]; then
                echo "❌ All health checks failed for GREEN revision"
                echo "📋 GREEN revision logs:"
                az containerapp logs show \
                  --name ${{ secrets.CONTAINER_APP_NAME }} \
                  --resource-group ${{ secrets.RESOURCE_GROUP }} \
                  --revision ${{ steps.get-green.outputs.green_revision }} \
                  --tail 50
                exit 1
              fi
              sleep 20
            fi
          done

      - name: Run smoke tests on GREEN
        run: |
          echo "🚬 Running smoke tests on GREEN revision..."
          # Add your actual smoke test commands here
          curl -s "https://${{ steps.get-green.outputs.green_fqdn }}/health" | jq -e '.status == "healthy"'
          curl -s "https://${{ steps.get-green.outputs.green_fqdn }}/api/status" | jq -e '.version'

      - name: Shift traffic to GREEN
        run: |
          echo "🔄 Shifting 100% traffic to GREEN revision"
          az containerapp ingress traffic set \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --revision-weight \
              ${{ steps.get-green.outputs.green_revision }}=100 \
            --output table

      - name: Deactivate BLUE revision
        if: steps.get-blue.outputs.blue_revision != ''
        run: |
          echo "🔵 Deactivating BLUE revision: ${{ steps.get-blue.outputs.blue_revision }}"
          az containerapp revision deactivate \
            -g ${{ secrets.RESOURCE_GROUP }} \
            -n ${{ secrets.CONTAINER_APP_NAME }} \
            --revision ${{ steps.get-blue.outputs.blue_revision }}

      - name: Get production URL
        id: get-url
        run: |
          URL=$(az containerapp show \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)
          echo "url=https://$URL" >> $GITHUB_OUTPUT
          echo "🌐 Production URL: https://$URL"

      - name: Verify Azure deployment
        run: |
          echo "✅ Successfully deployed to Azure Container Apps!"
          echo "🔵 Previous BLUE revision: ${{ steps.get-blue.outputs.blue_revision || 'None' }}"
          echo "🟢 Current GREEN revision: ${{ steps.get-green.outputs.green_revision }}"
          echo "🌐 Production URL: ${{ steps.get-url.outputs.url }}"
          
          echo "📊 Current traffic distribution:"
          az containerapp ingress traffic show \
            -g ${{ secrets.RESOURCE_GROUP }} \
            -n ${{ secrets.CONTAINER_APP_NAME }} \
            --query "{revisions: revisionTraffic, latestRevision: latestRevision}" \
            --output table

      - name: Slack Notification on Success
        if: ${{ success() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: 'success'
          text: "✅ Azure Blue-Green Deployment Successful"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Container App", "value": "${{ secrets.CONTAINER_APP_NAME }}", "short": true},
              {"title": "Deployment Type", "value": "Blue-Green", "short": true},
              {"title": "BLUE Revision", "value": "${{ steps.get-blue.outputs.blue_revision || 'None' }}", "short": true},
              {"title": "GREEN Revision", "value": "${{ steps.get-green.outputs.green_revision }}", "short": true},
              {"title": "Image", "value": "${{ secrets.DOCKERHUB_USERNAME }}/youtube-blog-converter:${{ github.sha }}", "short": false},
              {"title": "Production URL", "value": "${{ steps.get-url.outputs.url }}", "short": false},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: ${{ job.status }}
          text: "❌ Azure Blue-Green Deployment Failed"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Container App", "value": "${{ secrets.CONTAINER_APP_NAME }}", "short": true},
              {"title": "Deployment Type", "value": "Blue-Green", "short": true},
              {"title": "BLUE Revision", "value": "${{ steps.get-blue.outputs.blue_revision || 'None' }}", "short": true},
              {"title": "GREEN Revision", "value": "${{ steps.get-green.outputs.green_revision || 'None' }}", "short": true},
              {"title": "Image", "value": "${{ secrets.DOCKERHUB_USERNAME }}/youtube-blog-converter:${{ github.sha }}", "short": false},
              {"title": "Run ID", "value": "${{ github.run_id }}", "short": true},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

  