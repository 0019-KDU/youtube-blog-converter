name: CI/CD for YouTube Blog Converter with Blue-Green Deployment

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

permissions:
  issues: write
  contents: read
  pull-requests: write
  checks: write
  id-token: write  # Required for OIDC

env:
  SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

jobs:
  security-scan:
    runs-on: ubuntu-latest
    steps:
      - name: Show commit author
        run: |
          echo "Commit by ${{ github.actor }}"
          echo "Email: ${{ github.event.head_commit.author.email || 'N/A' }}"
          echo "Full details: ${{ toJson(github.event.head_commit.author) }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install Trivy
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Filesystem Scan with Trivy
        run: trivy fs --severity HIGH,CRITICAL --exit-code 0 .

      - name: Install Gitleaks
        run: |
          wget https://github.com/gitleaks/gitleaks/releases/download/v8.18.2/gitleaks_8.18.2_linux_x64.tar.gz
          tar -xzf gitleaks_8.18.2_linux_x64.tar.gz
          sudo mv gitleaks /usr/local/bin/
          rm gitleaks_8.18.2_linux_x64.tar.gz

      - name: Secret Detection with Gitleaks
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE_BRANCH="${{ github.event.pull_request.base.ref }}"
            echo "Scanning PR commits against base branch: $BASE_BRANCH"
            git fetch origin "$BASE_BRANCH" --depth=100
            BASE_COMMIT=$(git merge-base "origin/$BASE_BRANCH" HEAD)
            RANGE="$BASE_COMMIT..HEAD"
          elif [ "${{ github.event_name }}" = "push" ]; then
            echo "Scanning push event commits"
            if [ "${{ github.event.before }}" != "0000000000000000000000000000000000000000" ]; then
              RANGE="${{ github.event.before }}..${{ github.event.after }}"
            else
              RANGE="${{ github.event.after }}"
            fi
          else
            echo "Unsupported event type: ${{ github.event_name }}"
            exit 1
          fi

          echo "Scanning commit range: $RANGE"
          gitleaks detect \
            --source . \
            --report-format json \
            --report-path gitleaks-report.json \
            --log-opts "$RANGE"

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const assignee = "${{ github.actor }}";
              const authorName = "${{ github.event.head_commit.author.name }}";
              const authorEmail = "${{ github.event.head_commit.author.email }}";
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Security Scan Failure in ${context.job}`,
                body: `### ❌ Security Scan Failed\n\n` +
                      `**Job:** ${context.job}\n` +
                      `**Commit:** [${context.sha.substring(0,7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})\n` +
                      `**Workflow:** [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                      `**Commit Author:** ${authorName} (${authorEmail})\n\n` +
                      `Please investigate the security scan failure.`,
                assignees: [assignee],
                labels: ['ci-failure', 'security']
              });
            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
            }

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: ${{ job.status }}
          text: "❌ Security Scan Failed in ${{ github.repository }}"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Workflow", "value": "${{ github.workflow }}", "short": true},
              {"title": "Job", "value": "${{ github.job }}", "short": true},
              {"title": "Run ID", "value": "${{ github.run_id }}", "short": true},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true},
              {"title": "Commit Author", "value": "${{ github.event.head_commit.author.name }}", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

  build-and-test:
    runs-on: ubuntu-latest
    env:
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      SUPADATA_API_KEY: ${{ secrets.SUPADATA_API_KEY }}
    steps:
      - name: Show commit author
        run: |
          echo "Commit by ${{ github.actor }}"
          echo "Email: ${{ github.event.head_commit.author.email || 'N/A' }}"
          echo "Full details: ${{ toJson(github.event.head_commit.author) }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov
      
      - name: Run tests with coverage
        env:
          TESTING: true
          FLASK_ENV: testing
          CI: true
          LOG_TO_FILE: false
          LOG_LEVEL: DEBUG
        run: pytest --cov=src --cov-report=xml:coverage.xml -v tests/
        
      - name: Upload coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: coverage.xml

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const assignee = "${{ github.actor }}";
              const authorName = "${{ github.event.head_commit.author.name }}";
              const authorEmail = "${{ github.event.head_commit.author.email }}";
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Build/Tests Failed in ${context.job}`,
                body: `### ❌ Build/Tests Failed\n\n` +
                      `**Job:** ${context.job}\n` +
                      `**Commit:** [${context.sha.substring(0,7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})\n` +
                      `**Workflow:** [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                      `**Commit Author:** ${authorName} (${authorEmail})\n\n` +
                      `Test failures detected. Please check the build logs.`,
                assignees: [assignee],
                labels: ['ci-failure', 'tests']
              });
            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
            }

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: ${{ job.status }}
          text: "❌ Build/Tests Failed in ${{ github.repository }}"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Workflow", "value": "${{ github.workflow }}", "short": true},
              {"title": "Job", "value": "${{ github.job }}", "short": true},
              {"title": "Run ID", "value": "${{ github.run_id }}", "short": true},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true},
              {"title": "Commit Author", "value": "${{ github.event.head_commit.author.name }}", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

  sonarqube-scan:
    runs-on: self-hosted
    needs: build-and-test
    steps:
      - name: Show commit author
        run: |
          echo "Commit by ${{ github.actor }}"
          echo "Email: ${{ github.event.head_commit.author.email || 'N/A' }}"
          echo "Full details: ${{ toJson(github.event.head_commit.author) }}"
          
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Download coverage report
        uses: actions/download-artifact@v4
        with:
          name: coverage-report
          path: .
          
      - name: SonarQube Scan
        id: sonar-scan
        uses: SonarSource/sonarqube-scan-action@v5.3.0
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}
        with:
          args: >
            -Dsonar.python.coverage.reportPaths=coverage.xml
            -Dsonar.python.version=3.12
            -Dsonar.sources=src
            -Dsonar.tests=tests
            -Dsonar.test.inclusions=tests/**
            -Dsonar.exclusions=**/__pycache__/**,**/.pytest_cache/**,**/env/**
            -Dsonar.projectKey=${{ vars.SONAR_PROJECT_KEY }}
            -Dsonar.projectName=${{ vars.SONAR_PROJECT_NAME }}
            -Dsonar.projectVersion=1.0.${{ github.run_number }}
            -Dsonar.qualitygate.wait=true
            -Dsonar.scm.provider=git
            -Dsonar.links.scm=${{ github.server_url }}/${{ github.repository }}
            -Dsonar.links.ci=${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
            
      - name: SonarQube Quality Gate check
        id: sonar-quality-gate
        uses: sonarsource/sonarqube-quality-gate-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ vars.SONAR_HOST_URL }}

      - name: Create Detailed SonarQube PR Comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const sonarUrl = '${{ vars.SONAR_HOST_URL }}';
            const projectKey = '${{ vars.SONAR_PROJECT_KEY }}';
            const token = '${{ secrets.SONAR_TOKEN }}';
            
            try {
              // Create Basic Auth header - SonarQube uses token as username with empty password
              const auth = Buffer.from(`${token}:`).toString('base64');
              
              // Get project measures from SonarQube API
              const metricsResponse = await fetch(
                `${sonarUrl}/api/measures/component?component=${projectKey}&metricKeys=bugs,vulnerabilities,security_hotspots,code_smells,coverage,duplicated_lines_density,ncloc,sqale_rating,reliability_rating,security_rating`,
                {
                  headers: {
                    'Authorization': `Basic ${auth}`,
                    'Content-Type': 'application/json'
                  }
                }
              );
              
              if (!metricsResponse.ok) {
                const errorText = await metricsResponse.text();
                throw new Error(`SonarQube API error: ${metricsResponse.status} - ${errorText}`);
              }
              
              const metricsData = await metricsResponse.json();
              const measures = metricsData.component.measures;
              
              // Get Quality Gate status
              const qualityGateResponse = await fetch(
                `${sonarUrl}/api/qualitygates/project_status?projectKey=${projectKey}`,
                {
                  headers: {
                    'Authorization': `Basic ${auth}`,
                    'Content-Type': 'application/json'
                  }
                }
              );
              
              if (!qualityGateResponse.ok) {
                const errorText = await qualityGateResponse.text();
                throw new Error(`SonarQube Quality Gate API error: ${qualityGateResponse.status} - ${errorText}`);
              }
              
              const qualityGateData = await qualityGateResponse.json();
              const qualityGateStatus = qualityGateData.projectStatus.status;
              
              // Helper function to get metric value
              function getMetricValue(metricKey) {
                const measure = measures.find(m => m.metric === metricKey);
                return measure ? measure.value : 'N/A';
              }
              
              // Helper function to get rating emoji
              function getRatingEmoji(rating) {
                switch(rating) {
                  case 'A': return '🟢';
                  case 'B': return '🟡';
                  case 'C': return '🟠';
                  case 'D': return '🔴';
                  case 'E': return '🔴';
                  default: return '⚪';
                }
              }
              
              // Create detailed comment body using string concatenation
              const statusSection = qualityGateStatus === 'OK' ? '✅ **PASSED**' : '❌ **FAILED**';
              
              const metricsTable = [
                '| Metric | Value | Rating |',
                '|--------|-------|--------|',
                `| 🐛 **Bugs** | ${getMetricValue('bugs')} | ${getRatingEmoji(getMetricValue('reliability_rating'))} |`,
                `| 🔒 **Vulnerabilities** | ${getMetricValue('vulnerabilities')} | ${getRatingEmoji(getMetricValue('security_rating'))} |`,
                `| 🔥 **Security Hotspots** | ${getMetricValue('security_hotspots')} | - |`,
                `| 💨 **Code Smells** | ${getMetricValue('code_smells')} | ${getRatingEmoji(getMetricValue('sqale_rating'))} |`,
                `| 📏 **Lines of Code** | ${getMetricValue('ncloc')} | - |`,
                `| 🧪 **Coverage** | ${getMetricValue('coverage')}% | - |`,
                `| 📋 **Duplicated Lines** | ${getMetricValue('duplicated_lines_density')}% | - |`
              ].join('\n');
              
              const linksSection = [
                '### 🔗 Links',
                `- [📊 View Full Report](${sonarUrl}/dashboard?id=${projectKey})`,
                `- [🔍 View Issues](${sonarUrl}/project/issues?resolved=false&id=${projectKey})`,
                `- [📈 View Measures](${sonarUrl}/component_measures?id=${projectKey})`
              ].join('\n');
              
              const detailsSection = [
                '### ℹ️ Analysis Details',
                `- **Project Key**: \`${projectKey}\``,
                `- **Analysis Date**: ${new Date().toISOString()}`,
                `- **Commit**: \`${context.sha.substring(0, 7)}\``,
                `- **Workflow Run**: [#${context.runNumber}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})`
              ].join('\n');
              
              const commentBody = [
                '## 📊 SonarQube Analysis Results',
                '',
                '### Quality Gate Status',
                statusSection,
                '',
                '### 📈 Code Quality Metrics',
                '',
                metricsTable,
                '',
                linksSection,
                '',
                detailsSection,
                '',
                '---',
                '*This comment was automatically generated by SonarQube analysis in GitHub Actions*'
              ].join('\n');
              
              // Post comment to PR
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });
              
              console.log('Successfully posted SonarQube analysis results to PR');
              
            } catch (error) {
              console.error('Error creating SonarQube PR comment:', error);
              core.setFailed(`Failed to create PR comment: ${error.message}`);
            }

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const assignee = "${{ github.actor }}";
              const authorName = "${{ github.event.head_commit.author.name }}";
              const authorEmail = "${{ github.event.head_commit.author.email }}";
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `SonarQube Failure in ${context.job}`,
                body: `### ❌ SonarQube Quality Gate Failed\n\n` +
                      `**Job:** ${context.job}\n` +
                      `**Commit:** [${context.sha.substring(0,7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})\n` +
                      `**Workflow:** [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                      `**Commit Author:** ${authorName} (${authorEmail})\n\n` +
                      `Quality gate check failed. Please review SonarQube analysis.`,
                assignees: [assignee],
                labels: ['ci-failure', 'quality']
              });
            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
            }

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: ${{ job.status }}
          text: "❌ SonarQube Scan Failed in ${{ github.repository }}"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Workflow", "value": "${{ github.workflow }}", "short": true},
              {"title": "Job", "value": "${{ github.job }}", "short": true},
              {"title": "Run ID", "value": "${{ github.run_id }}", "short": true},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true},
              {"title": "Commit Author", "value": "${{ github.event.head_commit.author.name }}", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

  docker-build-test:
    needs: [security-scan, build-and-test, sonarqube-scan]
    runs-on: ubuntu-latest
    steps:
      - name: Show commit author
        run: |
          echo "Commit by ${{ github.actor }}"
          echo "Email: ${{ github.event.head_commit.author.email || 'N/A' }}"
          echo "Full details: ${{ toJson(github.event.head_commit.author) }}"
        
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Install Trivy (for container scanning)
        run: |
          sudo apt-get update -y
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update -y
          sudo apt-get install -y trivy

      - name: Build Docker image
        run: docker build -t youtube-blog-converter:${{ github.sha }} .

      - name: Container Vulnerability Scan with Trivy
        run: trivy image --severity HIGH,CRITICAL --exit-code 0 youtube-blog-converter:${{ github.sha }}
      
      - name: Run smoke test
        run: |
          docker run -d --name smoke-test \
            -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            -e SUPADATA_API_KEY="${{ secrets.SUPADATA_API_KEY }}" \
            -e JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}" \
            -e JWT_ACCESS_TOKEN_EXPIRES="${{ secrets.JWT_ACCESS_TOKEN_EXPIRES }}" \
            -e MONGODB_URI="${{ secrets.MONGODB_URI }}" \
            -e MONGODB_DB_NAME="${{ secrets.MONGODB_DB_NAME }}" \
            -e FLASK_SECRET_KEY="${{ secrets.FLASK_SECRET_KEY }}" \
            -e FLASK_DEBUG="false" \
            -e FLASK_HOST="0.0.0.0" \
            -e OPENAI_MODEL_NAME="${{ secrets.OPENAI_MODEL_NAME }}" \
            -e GA_MEASUREMENT_ID="${{ secrets.GA_MEASUREMENT_ID }}" \
            -e PROMETHEUS_ENDPOINT="${{ secrets.PROMETHEUS_ENDPOINT }}" \
            -e GRAFANA_ENDPOINT="${{ secrets.GRAFANA_ENDPOINT }}" \
            -e LOKI_ENDPOINT="${{ secrets.LOKI_ENDPOINT }}" \
            -e MONITORING_ENABLED="true" \
            -e METRICS_PORT="8000" \
            -p 5000:5000 \
            youtube-blog-converter:${{ github.sha }}
          # wait for Flask to boot
          for i in {1..10}; do
            docker logs smoke-test 2>&1 | grep -q "Running on" && break
            sleep 2
          done
          docker logs smoke-test
          curl --retry 5 --retry-delay 5 --retry-connrefused http://localhost:5000/
          docker stop smoke-test

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const assignee = "${{ github.actor }}";
              const authorName = "${{ github.event.head_commit.author.name }}";
              const authorEmail = "${{ github.event.head_commit.author.email }}";
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Docker Build Failed in ${context.job}`,
                body: `### ❌ Docker Build/Test Failed\n\n` +
                      `**Job:** ${context.job}\n` +
                      `**Commit:** [${context.sha.substring(0,7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})\n` +
                      `**Workflow:** [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                      `**Commit Author:** ${authorName} (${authorEmail})\n\n` +
                      `Docker build or smoke test failed. Please check container logs.`,
                assignees: [assignee],
                labels: ['ci-failure', 'docker']
              });
            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
            }

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: ${{ job.status }}
          text: "❌ Docker Build Failed in ${{ github.repository }}"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Workflow", "value": "${{ github.workflow }}", "short": true},
              {"title": "Job", "value": "${{ github.job }}", "short": true},
              {"title": "Run ID", "value": "${{ github.run_id }}", "short": true},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true},
              {"title": "Commit Author", "value": "${{ github.event.head_commit.author.name }}", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

  # 🛡️ NEW OWASP DAST SECURITY TESTING JOB
  owasp-zap-dast:
    needs: docker-build-test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - name: Show commit author
        run: |
          echo "Commit by ${{ github.actor }}"
          echo "Email: ${{ github.event.head_commit.author.email || 'N/A' }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Get Container App URL
        id: get-url
        run: |
          URL=$(az containerapp show \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)
          
          if [ -z "$URL" ] || [ "$URL" = "null" ]; then
            echo "❌ Failed to get Container App URL"
            exit 1
          fi
          
          FULL_URL="https://${URL}"
          echo "app_url=$FULL_URL" >> $GITHUB_OUTPUT
          echo "✅ Target URL for DAST: $FULL_URL"

      - name: Create ZAP Rules File
        run: |
          mkdir -p .zap
          cat << 'EOF' > .zap/rules.tsv
          # ZAP Scanning Rules
          # Format: ID	THRESHOLD	NEW_LEVEL	[DESCRIPTION]
          
          # Critical Rules - Fail build
          10020	OFF	FAIL	[Anti CSRF Tokens Scanner]
          10021	OFF	FAIL	[Absence of Anti-CSRF Tokens]
          10023	OFF	FAIL	[Information Disclosure - Debug Error Messages]
          10024	OFF	FAIL	[Information Disclosure - Sensitive Information in URL]
          10025	OFF	FAIL	[Information Disclosure - Sensitive Information in HTTP Referrer Header]
          10026	OFF	FAIL	[HTTP Parameter Override]
          10027	OFF	FAIL	[Information Disclosure - Suspicious Comments]
          10028	OFF	FAIL	[Open Redirect]
          10029	OFF	FAIL	[Cookie Poisoning]
          10030	OFF	FAIL	[User Controllable Charset]
          
          # SQL Injection
          40018	OFF	FAIL	[SQL Injection]
          40019	OFF	FAIL	[SQL Injection - MySQL]
          40020	OFF	FAIL	[SQL Injection - Hypersonic SQL]
          40021	OFF	FAIL	[SQL Injection - Oracle]
          40022	OFF	FAIL	[SQL Injection - PostgreSQL]
          
          # XSS
          40012	OFF	FAIL	[Cross Site Scripting (Reflected)]
          40014	OFF	FAIL	[Cross Site Scripting (Persistent)]
          40016	OFF	FAIL	[Cross Site Scripting (Persistent) - Prime]
          40017	OFF	FAIL	[Cross Site Scripting (Persistent) - Spider]
          
          # Authentication and Session Management
          10010	OFF	FAIL	[Cookie No HttpOnly Flag]
          10011	OFF	FAIL	[Cookie Without Secure Flag]
          10016	OFF	FAIL	[Web Browser XSS Protection Not Enabled]
          10017	OFF	FAIL	[Cross-Domain JavaScript Source File Inclusion]
          10019	OFF	FAIL	[Content-Type Header Missing]
          
          # Warn level rules
          10015	OFF	WARN	[Incomplete or No Cache-control and Pragma HTTP Header Set]
          10020	OFF	WARN	[X-Frame-Options Header]
          EOF

      - name: Run OWASP ZAP DAST Scan
        uses: zaproxy/action-full-scan@v0.10.0
        with:
          target: ${{ steps.get-url.outputs.app_url }}
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a -j -m 10 -T 60 -z "-configFile /zap/wrk/.zap/options.prop"'
          issue_title: 'OWASP ZAP DAST Security Vulnerabilities'
          fail_action: true
          
      - name: Upload ZAP Report
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: zap-report
          path: report_html.html

      - name: Parse ZAP Results
        id: parse-results
        if: always()
        run: |
          if [ -f "report_json.json" ]; then
            HIGH_COUNT=$(jq '[.site[].alerts[] | select(.riskdesc | startswith("High"))] | length' report_json.json)
            MEDIUM_COUNT=$(jq '[.site[].alerts[] | select(.riskdesc | startswith("Medium"))] | length' report_json.json)
            LOW_COUNT=$(jq '[.site[].alerts[] | select(.riskdesc | startswith("Low"))] | length' report_json.json)
            
            echo "high_count=$HIGH_COUNT" >> $GITHUB_OUTPUT
            echo "medium_count=$MEDIUM_COUNT" >> $GITHUB_OUTPUT
            echo "low_count=$LOW_COUNT" >> $GITHUB_OUTPUT
            
            echo "🔍 DAST Scan Results:"
            echo "High Risk: $HIGH_COUNT"
            echo "Medium Risk: $MEDIUM_COUNT"
            echo "Low Risk: $LOW_COUNT"
          else
            echo "⚠️ ZAP report not found"
          fi

      - name: Create Detailed DAST PR Comment
        if: github.event_name == 'pull_request' && always()
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const highCount = '${{ steps.parse-results.outputs.high_count }}' || '0';
            const mediumCount = '${{ steps.parse-results.outputs.medium_count }}' || '0';
            const lowCount = '${{ steps.parse-results.outputs.low_count }}' || '0';
            
            const commentBody = [
              '## 🛡️ OWASP ZAP DAST Security Scan Results',
              '',
              '### 📊 Vulnerability Summary',
              '',
              '| Risk Level | Count | Status |',
              '|------------|-------|---------|',
              `| 🔴 **High** | ${highCount} | ${highCount > 0 ? '❌ Action Required' : '✅ Clean'} |`,
              `| 🟡 **Medium** | ${mediumCount} | ${mediumCount > 0 ? '⚠️ Review Needed' : '✅ Clean'} |`,
              `| 🔵 **Low** | ${lowCount} | ${lowCount > 0 ? 'ℹ️ Informational' : '✅ Clean'} |`,
              '',
              '### 🎯 Scan Details',
              `- **Target URL**: ${{ steps.get-url.outputs.app_url }}`,
              `- **Scan Type**: Full OWASP ZAP DAST Scan`,
              `- **OWASP Top 10 Coverage**: ✅ Complete`,
              `- **Scan Date**: ${new Date().toISOString()}`,
              '',
              '### 📋 Security Categories Tested',
              '- ✅ SQL Injection (OWASP A03)',
              '- ✅ Cross-Site Scripting (OWASP A03)', 
              '- ✅ Broken Authentication (OWASP A07)',
              '- ✅ Security Misconfiguration (OWASP A05)',
              '- ✅ Insecure Direct Object References',
              '- ✅ Cross-Site Request Forgery',
              '- ✅ Information Disclosure',
              '- ✅ HTTP Security Headers',
              '',
              highCount > 0 || mediumCount > 0 ? 
              '⚠️ **Action Required**: Please review the detailed report and address identified vulnerabilities before merging.' : 
              '✅ **All Clear**: No critical security vulnerabilities detected.',
              '',
              '📄 **Download Full Report**: Check the workflow artifacts for detailed HTML report.',
              '',
              '---',
              '*This scan was performed using OWASP ZAP following production security standards*'
            ].join('\n');
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: commentBody
            });

      - name: Security Gate Check
        if: always()
        run: |
          HIGH_COUNT=${{ steps.parse-results.outputs.high_count }}
          MEDIUM_COUNT=${{ steps.parse-results.outputs.medium_count }}
          
          echo "🚨 Security Gate Evaluation"
          echo "High Risk Vulnerabilities: $HIGH_COUNT"
          echo "Medium Risk Vulnerabilities: $MEDIUM_COUNT"
          
          # Fail build if high-risk vulnerabilities found
          if [ "$HIGH_COUNT" -gt 0 ]; then
            echo "❌ SECURITY GATE FAILED: High-risk vulnerabilities detected"
            echo "Build failed due to critical security issues"
            exit 1
          fi
          
          # Warning for medium-risk (but don't fail build)
          if [ "$MEDIUM_COUNT" -gt 5 ]; then
            echo "⚠️ WARNING: Multiple medium-risk vulnerabilities detected ($MEDIUM_COUNT)"
            echo "Consider addressing these issues"
          fi
          
          echo "✅ Security gate passed"

      - name: Create issue on DAST failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const assignee = "${{ github.actor }}";
              const authorName = "${{ github.event.head_commit.author.name }}";
              const authorEmail = "${{ github.event.head_commit.author.email }}";
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🛡️ DAST Security Scan Failed - Critical Vulnerabilities Detected`,
                body: `### 🚨 DAST Security Scan Failed\n\n` +
                      `**Job:** ${context.job}\n` +
                      `**Commit:** [${context.sha.substring(0,7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})\n` +
                      `**Workflow:** [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                      `**Commit Author:** ${authorName} (${authorEmail})\n\n` +
                      `**Target URL:** ${{ steps.get-url.outputs.app_url }}\n` +
                      `**High Risk Vulnerabilities:** ${{ steps.parse-results.outputs.high_count }}\n` +
                      `**Medium Risk Vulnerabilities:** ${{ steps.parse-results.outputs.medium_count }}\n\n` +
                      `**Critical security vulnerabilities detected by OWASP ZAP scan.**\n\n` +
                      `### Immediate Actions Required:\n` +
                      `1. Review the DAST scan report (check workflow artifacts)\n` +
                      `2. Address all HIGH-risk vulnerabilities immediately\n` +
                      `3. Review and fix MEDIUM-risk vulnerabilities\n` +
                      `4. Re-run security tests after fixes\n\n` +
                      `**OWASP Top 10 Categories Tested:**\n` +
                      `- Injection Attacks (SQL, XSS)\n` +
                      `- Broken Authentication\n` +
                      `- Security Misconfiguration\n` +
                      `- And 7 more critical categories`,
                assignees: [assignee],
                labels: ['security', 'dast', 'owasp', 'critical', 'ci-failure']
              });
            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
            }

      - name: Slack Security Alert
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: 'failure'
          text: "🚨 CRITICAL: DAST Security Scan Failed - ${{ github.repository }}"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "High Risk Issues", "value": "${{ steps.parse-results.outputs.high_count }}", "short": true},
              {"title": "Medium Risk Issues", "value": "${{ steps.parse-results.outputs.medium_count }}", "short": true},
              {"title": "Target URL", "value": "${{ steps.get-url.outputs.app_url }}", "short": false},
              {"title": "Scan Type", "value": "OWASP ZAP Full DAST", "short": true},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Security Report>"

  deploy-to-dockerhub:
    needs: [docker-build-test, owasp-zap-dast]  # Added DAST dependency
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Show commit author
        run: |
          echo "Commit by ${{ github.actor }}"
          echo "Email: ${{ github.event.head_commit.author.email || 'N/A' }}"
          echo "Full details: ${{ toJson(github.event.head_commit.author) }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/youtube-blog-converter:latest
            ${{ secrets.DOCKERHUB_USERNAME }}/youtube-blog-converter:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Verify deployment
        run: |
          echo "Successfully deployed to Docker Hub!"
          echo "Image: ${{ secrets.DOCKERHUB_USERNAME }}/youtube-blog-converter:${{ github.sha }}"

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const assignee = "${{ github.actor }}";
              const authorName = "${{ github.event.head_commit.author.name }}";
              const authorEmail = "${{ github.event.head_commit.author.email }}";
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Deployment Failed in ${context.job}`,
                body: `### ❌ Deployment to Docker Hub Failed\n\n` +
                      `**Job:** ${context.job}\n` +
                      `**Commit:** [${context.sha.substring(0,7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})\n` +
                      `**Workflow:** [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                      `**Commit Author:** ${authorName} (${authorEmail})\n\n` +
                      `Deployment to Docker Hub failed. Please check build logs.`,
                assignees: [assignee],
                labels: ['ci-failure', 'deployment']
              });
            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
            }

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: ${{ job.status }}
          text: "❌ Deployment Failed in ${{ github.repository }}"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Workflow", "value": "${{ github.workflow }}", "short": true},
              {"title": "Job", "value": "${{ github.job }}", "short": true},
              {"title": "Run ID", "value": "${{ github.run_id }}", "short": true},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true},
              {"title": "Commit Author", "value": "${{ github.event.head_commit.author.name }}", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

  # 🔵 BLUE-GREEN DEPLOYMENT IMPLEMENTATION
  deploy-green-environment:
    needs: [deploy-to-dockerhub, owasp-zap-dast]  # Added DAST dependency
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    outputs:
      green-revision: ${{ steps.deploy-green.outputs.revision_name }}
      app-url: ${{ steps.get-url.outputs.url }}
      
    steps:
      - name: Show commit author
        run: |
          echo "Commit by ${{ github.actor }}"
          echo "Email: ${{ github.event.head_commit.author.email || 'N/A' }}"
          echo "Full details: ${{ toJson(github.event.head_commit.author) }}"

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Configure Docker Hub registry
        run: |
          echo "🔄 Configuring Docker Hub registry..."
          az containerapp registry remove \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --server docker.io || true

          az containerapp registry set \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --server docker.io \
            --username ${{ secrets.DOCKERHUB_USERNAME }} \
            --password ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Deploy to Green Environment
        id: deploy-green
        run: |
          # Generate sequential revision suffix using GitHub run number
          RUN_NUMBER=$(printf "%07d" ${{ github.run_number }})
          GREEN_REVISION_SUFFIX="green-${RUN_NUMBER}"
          REVISION_NAME="${{ secrets.CONTAINER_APP_NAME }}--${GREEN_REVISION_SUFFIX}"
          
          echo "🟢 Deploying to GREEN environment..."
          echo "Container App: ${{ secrets.CONTAINER_APP_NAME }}"
          echo "Resource Group: ${{ secrets.RESOURCE_GROUP }}"
          echo "Container Name: ytblogger"
          echo "Image: ${{ secrets.DOCKERHUB_USERNAME }}/youtube-blog-converter:${{ github.sha }}"
          echo "Green Revision Suffix: $GREEN_REVISION_SUFFIX"
          echo "Full Revision Name: $REVISION_NAME (${#REVISION_NAME} chars)"
          
          # Validate revision name length
          if [ ${#REVISION_NAME} -gt 54 ]; then
            echo "❌ ERROR: Revision name too long (${#REVISION_NAME} chars, max 54)"
            exit 1
          fi
          
          echo "✅ Revision name validation passed"
          
          az containerapp update \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --container-name ytblogger \
            --image ${{ secrets.DOCKERHUB_USERNAME }}/youtube-blog-converter:${{ github.sha }} \
            --revision-suffix $GREEN_REVISION_SUFFIX \
            --set-env-vars DEPLOYMENT_COLOR=green DEPLOYMENT_VERSION=${{ github.sha }} \
            --output table
          
          echo "revision_name=$REVISION_NAME" >> $GITHUB_OUTPUT
          echo "✅ Green revision created: $REVISION_NAME"

      - name: Wait for Green Deployment
        run: |
          echo "⏳ Waiting for GREEN deployment to stabilize..."
          sleep 60
          
          REVISION_NAME="${{ steps.deploy-green.outputs.revision_name }}"
          
          for i in {1..15}; do
            REVISION_STATUS=$(az containerapp revision show \
              --revision $REVISION_NAME \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --query "properties.provisioningState" \
              --output tsv 2>/dev/null || echo "Unknown")
            
            echo "GREEN revision status: $REVISION_STATUS (attempt $i/15)"
            
            if [ "$REVISION_STATUS" = "Succeeded" ]; then
              echo "✅ GREEN revision is ready!"
              break
            elif [ "$REVISION_STATUS" = "Failed" ]; then
              echo "❌ GREEN revision deployment failed!"
              az containerapp revision show \
                --revision $REVISION_NAME \
                --resource-group ${{ secrets.RESOURCE_GROUP }} \
                --query "{name: name, status: properties.provisioningState, replicas: properties.replicas}" \
                --output table
              exit 1
            fi
            
            sleep 15
          done

      - name: Add Green Label
        run: |
          echo "🏷️ Adding 'green' label to revision..."
          
          # Remove existing green label if it exists (with --yes flag)
          az containerapp revision label remove \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --label green \
            --yes || echo "No existing green label to remove"
          
          # Add green label to new revision (with --yes flag)
          az containerapp revision label add \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --label green \
            --revision ${{ steps.deploy-green.outputs.revision_name }} \
            --yes
          
          echo "✅ Green label added successfully"

      - name: Get Application URL
        id: get-url
        run: |
          echo "🔍 Retrieving app URL..."
          
          # Retry getting URL in case of temporary issues
          for i in {1..3}; do
            URL=$(az containerapp show \
              --name ${{ secrets.CONTAINER_APP_NAME }} \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --query "properties.configuration.ingress.fqdn" \
              --output tsv)
            
            if [ -n "$URL" ] && [ "$URL" != "null" ]; then
              break
            fi
            
            echo "⚠️ Failed to get URL on attempt $i/3, retrying..."
            sleep 10
          done
          
          if [ -z "$URL" ] || [ "$URL" = "null" ]; then
            echo "❌ Failed to get Container App URL after 3 attempts"
            exit 1
          fi
          
          FULL_URL="https://${URL}"
          echo "url=$FULL_URL" >> $GITHUB_OUTPUT
          echo "✅ Container App URL: $FULL_URL"

      - name: Health Check Green Environment
        run: |
          echo "🩺 Testing GREEN environment health..."
          
          GREEN_URL="${{ steps.get-url.outputs.url }}?label=green"
          echo "Testing GREEN URL: $GREEN_URL"
          
          # Extended health check with more retries for Container Apps cold start
          for i in {1..12}; do
            echo "🔍 Health check attempt $i/12 for GREEN environment..."
            
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 60 --connect-timeout 30 "$GREEN_URL" || echo "000")
            echo "HTTP Status: $HTTP_STATUS"
            
            if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "201" ] || [ "$HTTP_STATUS" = "302" ]; then
              echo "✅ GREEN environment health check passed! (Status: $HTTP_STATUS)"
              break
            else
              echo "⚠️ GREEN environment health check failed (Status: $HTTP_STATUS)"
              if [ $i -eq 12 ]; then
                echo "❌ GREEN environment failed all health checks"
                echo "📋 Container App status:"
                az containerapp show \
                  --name ${{ secrets.CONTAINER_APP_NAME }} \
                  --resource-group ${{ secrets.RESOURCE_GROUP }} \
                  --query "{name: name, status: properties.provisioningState, replicas: properties.template.scale, ingress: properties.configuration.ingress.fqdn}" \
                  --output table
                
                echo "📋 GREEN revision logs (last 50 lines):"
                az containerapp logs show \
                  --name ${{ secrets.CONTAINER_APP_NAME }} \
                  --resource-group ${{ secrets.RESOURCE_GROUP }} \
                  --revision ${{ steps.deploy-green.outputs.revision_name }} \
                  --tail 50 || echo "Could not fetch logs"
                exit 1
              fi
              sleep 45
            fi
          done

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const assignee = "${{ github.actor }}";
              const authorName = "${{ github.event.head_commit.author.name }}";
              const authorEmail = "${{ github.event.head_commit.author.email }}";
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `GREEN Environment Deployment Failed in ${context.job}`,
                body: `### 🟢❌ GREEN Environment Deployment Failed\n\n` +
                      `**Job:** ${context.job}\n` +
                      `**Commit:** [${context.sha.substring(0,7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})\n` +
                      `**Workflow:** [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                      `**Commit Author:** ${authorName} (${authorEmail})\n\n` +
                      `**Container App:** ${{ secrets.CONTAINER_APP_NAME }}\n` +
                      `**Resource Group:** ${{ secrets.RESOURCE_GROUP }}\n` +
                      `**Image:** ${{ secrets.DOCKERHUB_USERNAME }}/youtube-blog-converter:${context.sha}\n\n` +
                      `GREEN environment deployment failed. Blue-green deployment halted.`,
                assignees: [assignee],
                labels: ['ci-failure', 'blue-green-deployment', 'urgent']
              });
            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
            }

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: ${{ job.status }}
          text: "🟢❌ GREEN Environment Deployment Failed in ${{ github.repository }}"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Workflow", "value": "${{ github.workflow }}", "short": true},
              {"title": "Job", "value": "${{ github.job }}", "short": true},
              {"title": "Run ID", "value": "${{ github.run_id }}", "short": true},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true},
              {"title": "Container App", "value": "${{ secrets.CONTAINER_APP_NAME }}", "short": true},
              {"title": "Image", "value": "${{ secrets.DOCKERHUB_USERNAME }}/youtube-blog-converter:${{ github.sha }}", "short": false}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

  blue-green-traffic-switch:
    needs: deploy-green-environment
    runs-on: ubuntu-latest
    environment: production  # Requires manual approval
    
    steps:
      - name: Show commit author
        run: |
          echo "Commit by ${{ github.actor }}"
          echo "Email: ${{ github.event.head_commit.author.email || 'N/A' }}"

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}
    
      - name: Enable Multiple Revision Mode
        run: |
          echo "🔧 Ensuring Container App is in multiple revision mode..."
          
          # Check current revision mode
          CURRENT_MODE=$(az containerapp show \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --query "properties.configuration.activeRevisionsMode" \
            --output tsv)
          
          echo "Current revision mode: $CURRENT_MODE"
          
          if [ "$CURRENT_MODE" = "Single" ]; then
            echo "🔄 Switching to multiple revision mode..."
            az containerapp revision set-mode \
              --name ${{ secrets.CONTAINER_APP_NAME }} \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --mode multiple
            
            echo "✅ Container App switched to multiple revision mode"
            
            # Wait for the change to take effect
            sleep 30
          else
            echo "✅ Container App is already in multiple revision mode"
          fi
      
      - name: Debug Previous Job Outputs
        run: |
          echo "🔍 Debugging previous job outputs..."
          echo "needs.deploy-green-environment.result: '${{ needs.deploy-green-environment.result }}'"
          echo "needs.deploy-green-environment.outputs: '${{ toJSON(needs.deploy-green-environment.outputs) }}'"
          echo "GREEN revision raw: '${{ needs.deploy-green-environment.outputs.green-revision }}'"
          echo "App URL raw: '${{ needs.deploy-green-environment.outputs.app-url }}'"

      - name: Validate or Retrieve Missing Inputs
        id: get-inputs
        run: |
          echo "🔍 Validating and retrieving deployment inputs..."
          
          # Check if previous job succeeded
          if [ "${{ needs.deploy-green-environment.result }}" != "success" ]; then
            echo "❌ Previous job (deploy-green-environment) did not succeed: ${{ needs.deploy-green-environment.result }}"
            exit 1
          fi
          
          # Try to get GREEN revision from job outputs first
          GREEN_REVISION="${{ needs.deploy-green-environment.outputs.green-revision }}"
          APP_URL="${{ needs.deploy-green-environment.outputs.app-url }}"
          
          echo "From job outputs - GREEN revision: '$GREEN_REVISION'"
          echo "From job outputs - App URL: '$APP_URL'"
          
          # If GREEN revision is empty, try to find it manually
          if [ -z "$GREEN_REVISION" ]; then
            echo "⚠️ GREEN revision not found in outputs, searching manually..."
            
            # Generate the expected revision name
            RUN_NUMBER=$(printf "%07d" ${{ github.run_number }})
            GREEN_REVISION_SUFFIX="green-${RUN_NUMBER}"
            EXPECTED_REVISION="${{ secrets.CONTAINER_APP_NAME }}--${GREEN_REVISION_SUFFIX}"
            
            echo "Expected GREEN revision: $EXPECTED_REVISION"
            
            # Verify it exists
            REVISION_EXISTS=$(az containerapp revision show \
              --revision "$EXPECTED_REVISION" \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --query "name" \
              --output tsv 2>/dev/null || echo "null")
            
            if [ "$REVISION_EXISTS" != "null" ] && [ -n "$REVISION_EXISTS" ]; then
              GREEN_REVISION="$EXPECTED_REVISION"
              echo "✅ Found GREEN revision manually: $GREEN_REVISION"
            else
              echo "❌ Could not find GREEN revision. Searching for latest green revision..."
              GREEN_REVISION=$(az containerapp revision list \
                --name ${{ secrets.CONTAINER_APP_NAME }} \
                --resource-group ${{ secrets.RESOURCE_GROUP }} \
                --query "[?starts_with(name, '${{ secrets.CONTAINER_APP_NAME }}--green-')] | [0].name" \
                --output tsv)
              
              if [ -z "$GREEN_REVISION" ] || [ "$GREEN_REVISION" = "null" ]; then
                echo "❌ No GREEN revision found at all!"
                exit 1
              fi
              echo "✅ Found latest GREEN revision: $GREEN_REVISION"
            fi
          fi
          
          # If App URL is empty, retrieve it manually
          if [ -z "$APP_URL" ]; then
            echo "⚠️ App URL not found in outputs, retrieving manually..."
            
            # Get app URL from Azure
            for i in {1..3}; do
              URL=$(az containerapp show \
                --name ${{ secrets.CONTAINER_APP_NAME }} \
                --resource-group ${{ secrets.RESOURCE_GROUP }} \
                --query "properties.configuration.ingress.fqdn" \
                --output tsv)
              
              if [ -n "$URL" ] && [ "$URL" != "null" ]; then
                APP_URL="https://${URL}"
                break
              fi
              
              echo "⚠️ Failed to get URL on attempt $i/3, retrying..."
              sleep 10
            done
            
            if [ -z "$APP_URL" ] || [ "$APP_URL" = "https://null" ]; then
              echo "❌ Failed to get Container App URL after 3 attempts"
              exit 1
            fi
            echo "✅ Retrieved App URL manually: $APP_URL"
          fi
          
          # Final validation
          if [ -z "$GREEN_REVISION" ]; then
            echo "❌ GREEN revision is still empty after all attempts!"
            exit 1
          fi
          
          if [ -z "$APP_URL" ]; then
            echo "❌ App URL is still empty after all attempts!"
            exit 1
          fi
          
          # Set outputs for subsequent steps
          echo "green_revision=$GREEN_REVISION" >> $GITHUB_OUTPUT
          echo "app_url=$APP_URL" >> $GITHUB_OUTPUT
          
          echo "✅ All inputs validated successfully:"
          echo "  GREEN revision: $GREEN_REVISION"
          echo "  App URL: $APP_URL"

      - name: Get Current Blue Revision
        id: get-blue
        run: |
          echo "🔍 Identifying current BLUE (production) revision..."
          
          # Get current production revision (blue) - exclude the new green revision
          GREEN_REVISION="${{ steps.get-inputs.outputs.green_revision }}"
          echo "Excluding GREEN revision: $GREEN_REVISION"
          
          # Get current production revision receiving traffic (should be different from green)
          BLUE_REVISION=$(az containerapp revision list \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --query "[?properties.trafficWeight > \`0\` && name != '$GREEN_REVISION'].name | [0]" \
            --output tsv)
          
          if [ -z "$BLUE_REVISION" ] || [ "$BLUE_REVISION" = "null" ]; then
            echo "⚠️ No current BLUE revision found with traffic. Getting latest active revision..."
            BLUE_REVISION=$(az containerapp revision list \
              --name ${{ secrets.CONTAINER_APP_NAME }} \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --query "[?properties.active && name != '$GREEN_REVISION'] | [0].name" \
              --output tsv)
          fi
          
          if [ -z "$BLUE_REVISION" ] || [ "$BLUE_REVISION" = "null" ]; then
            echo "⚠️ No suitable BLUE revision found. This might be the first deployment."
            BLUE_REVISION="none"
          fi
          
          echo "blue_revision=$BLUE_REVISION" >> $GITHUB_OUTPUT
          echo "📘 Current BLUE revision: $BLUE_REVISION"

      - name: Pre-Switch Validation
        run: |
          echo "🔍 Pre-switch validation..."
          echo "GREEN revision: '${{ steps.get-inputs.outputs.green_revision }}'"
          echo "BLUE revision: '${{ steps.get-blue.outputs.blue_revision }}'"
          echo "App URL: '${{ steps.get-inputs.outputs.app_url }}'"
          
          # Construct GREEN URL properly
          BASE_URL="${{ steps.get-inputs.outputs.app_url }}"
          GREEN_URL="${BASE_URL}?label=green"
          echo "Final GREEN health check URL: $GREEN_URL"
          
          # Wait a bit more for GREEN environment to stabilize
          echo "⏳ Waiting for GREEN environment to fully stabilize..."
          sleep 30
          
          # Extended health check with more attempts
          for i in {1..8}; do
            echo "🔍 GREEN health check attempt $i/8..."
            
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 45 --connect-timeout 30 "$GREEN_URL" || echo "000")
            echo "HTTP Status: $HTTP_STATUS"
            
            if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "201" ] || [ "$HTTP_STATUS" = "302" ]; then
              echo "✅ GREEN environment health check passed! (Status: $HTTP_STATUS)"
              break
            else
              echo "⚠️ GREEN environment health check failed (Status: $HTTP_STATUS, attempt $i/8)"
              if [ $i -eq 8 ]; then
                echo "❌ GREEN environment failed final health check after 8 attempts"
                
                # Debug information
                echo "🔍 Debug Information:"
                echo "URL tested: $GREEN_URL"
                echo "Base URL: $BASE_URL"
                
                # Check if green label exists
                echo "📋 Checking GREEN revision status:"
                az containerapp revision show \
                  --revision ${{ steps.get-inputs.outputs.green_revision }} \
                  --resource-group ${{ secrets.RESOURCE_GROUP }} \
                  --query "{name: name, status: properties.provisioningState, active: properties.active, trafficWeight: properties.trafficWeight}" \
                  --output table || echo "Could not get revision details"
                
                exit 1
              fi
              sleep 20
            fi
          done

      - name: Switch Traffic to Green
        id: traffic-switch
        run: |
          echo "🔄 Switching traffic from BLUE to GREEN..."
          echo "Directing 100% traffic to: ${{ steps.get-inputs.outputs.green_revision }}"
          
          # Switch 100% traffic to green revision
          az containerapp ingress traffic set \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --revision-weight ${{ steps.get-inputs.outputs.green_revision }}=100 \
            --output table
          
          echo "✅ Traffic switched to GREEN environment"
          echo "traffic_switched=true" >> $GITHUB_OUTPUT

      - name: Post-Switch Verification
        run: |
          echo "⏳ Waiting for traffic switch to take effect..."
          sleep 45
          
          # Verify traffic is now going to GREEN
          MAIN_URL="${{ steps.get-inputs.outputs.app_url }}"
          echo "Verifying main URL now serves GREEN: $MAIN_URL"
          
          for i in {1..8}; do
            echo "🔍 Post-switch verification attempt $i/8..."
            
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 45 --connect-timeout 30 "$MAIN_URL" || echo "000")
            echo "HTTP Status: $HTTP_STATUS"
            
            if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "201" ] || [ "$HTTP_STATUS" = "302" ]; then
              echo "✅ Post-switch verification passed! (Status: $HTTP_STATUS)"
              break
            else
              echo "⚠️ Post-switch verification failed (Status: $HTTP_STATUS, attempt $i/8)"
              if [ $i -eq 8 ]; then
                echo "❌ Post-switch verification failed - initiating rollback"
                exit 1
              fi
              sleep 25
            fi
          done

      - name: Update Labels
        run: |
          echo "🏷️ Updating deployment labels..."
          
          # Remove old blue label if exists (with --yes flag)
          az containerapp revision label remove \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --label blue \
            --yes || true
          
          # Add blue label to new production revision (with --yes flag)
          az containerapp revision label add \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --label blue \
            --revision ${{ steps.get-inputs.outputs.green_revision }} \
            --yes
          
          echo "🏷️ Labels updated: GREEN is now BLUE (production)"

      - name: Final Health Check
        run: |
          echo "🩺 Final production health check..."
          
          PROD_URL="${{ steps.get-inputs.outputs.app_url }}"
          echo "Production URL: $PROD_URL"
          
          for i in {1..5}; do
            echo "🔍 Production health check attempt $i/5..."
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 "$PROD_URL" || echo "000")
            
            if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "201" ] || [ "$HTTP_STATUS" = "302" ]; then
              echo "✅ Production health check passed! (Status: $HTTP_STATUS)"
              break
            else
              echo "⚠️ Production health check failed (Status: $HTTP_STATUS, attempt $i/5)"
              if [ $i -eq 5 ]; then
                echo "❌ Production health check failed - consider rollback"
                exit 1
              fi
              sleep 15
            fi
          done

      - name: Cleanup Old Revisions
        run: |
          echo "🧹 Cleaning up old revisions..."
          
          # Keep only the last 3 revisions (current + 2 previous for rollback capability)
          OLD_REVISIONS=$(az containerapp revision list \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --query "[?properties.trafficWeight == \`0\`] | [3:].name" \
            --output tsv)
          
          if [ -n "$OLD_REVISIONS" ]; then
            for revision in $OLD_REVISIONS; do
              if [ -n "$revision" ] && [ "$revision" != "null" ]; then
                echo "🗑️ Deactivating old revision: $revision"
                az containerapp revision deactivate \
                  --resource-group ${{ secrets.RESOURCE_GROUP }} \
                  --revision "$revision" || true
              fi
            done
            echo "✅ Old revisions cleaned up"
          else
            echo "ℹ️ No old revisions to clean up"
          fi

      - name: Deployment Summary
        run: |
          echo "🎉 Blue-Green Deployment Complete!"
          echo "=========================================="
          echo "✅ GREEN environment deployed successfully"
          echo "✅ Traffic switched to GREEN (now BLUE/production)"
          echo "✅ Health checks passed"
          echo "✅ Old revisions cleaned up"
          echo ""
          echo "📊 Deployment Details:"
          echo "Container App: ${{ secrets.CONTAINER_APP_NAME }}"
          echo "New Production Revision: ${{ steps.get-inputs.outputs.green_revision }}"
          echo "Previous BLUE Revision: ${{ steps.get-blue.outputs.blue_revision }}"
          echo "Image: ${{ secrets.DOCKERHUB_USERNAME }}/youtube-blog-converter:${{ github.sha }}"
          echo "Application URL: ${{ steps.get-inputs.outputs.app_url }}"
          echo "Commit: ${{ github.sha }}"

      - name: Create issue on failure
        if: ${{ failure() }}
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const assignee = "${{ github.actor }}";
              const authorName = "${{ github.event.head_commit.author.name }}";
              const authorEmail = "${{ github.event.head_commit.author.email }}";
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `Blue-Green Traffic Switch Failed in ${context.job}`,
                body: `### 🔄❌ Blue-Green Traffic Switch Failed\n\n` +
                      `**Job:** ${context.job}\n` +
                      `**Commit:** [${context.sha.substring(0,7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})\n` +
                      `**Workflow:** [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                      `**Commit Author:** ${authorName} (${authorEmail})\n\n` +
                      `**Container App:** ${{ secrets.CONTAINER_APP_NAME }}\n` +
                      `**GREEN Revision:** ${{ steps.get-inputs.outputs.green_revision }}\n` +
                      `**BLUE Revision:** ${{ steps.get-blue.outputs.blue_revision }}\n\n` +
                      `Traffic switch failed. System may need manual intervention.\n\n` +
                      `**Manual Rollback Steps:**\n` +
                      `1. Check Azure Portal for Container App status\n` +
                      `2. If needed, manually switch traffic back to previous BLUE revision\n` +
                      `3. Investigate logs for the failed GREEN deployment`,
                assignees: [assignee],
                labels: ['ci-failure', 'blue-green-deployment', 'urgent', 'production']
              });
            } catch (error) {
              console.error('Error creating issue:', error);
              core.setFailed(`Failed to create issue: ${error.message}`);
            }

      - name: Slack Notification on Failure
        if: ${{ failure() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: ${{ job.status }}
          text: "🔄❌ Blue-Green Traffic Switch Failed in ${{ github.repository }}"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Container App", "value": "${{ secrets.CONTAINER_APP_NAME }}", "short": true},
              {"title": "GREEN Revision", "value": "${{ steps.get-inputs.outputs.green_revision }}", "short": true},
              {"title": "BLUE Revision", "value": "${{ steps.get-blue.outputs.blue_revision }}", "short": true},
              {"title": "Run ID", "value": "${{ github.run_id }}", "short": true},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

      - name: Slack Notification on Success
        if: ${{ success() }}
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: 'success'
          text: "🎉 Blue-Green Deployment Successful in ${{ github.repository }}"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Container App", "value": "${{ secrets.CONTAINER_APP_NAME }}", "short": true},
              {"title": "New Production", "value": "${{ steps.get-inputs.outputs.green_revision }}", "short": false},
              {"title": "Previous Version", "value": "${{ steps.get-blue.outputs.blue_revision }}", "short": false},
              {"title": "Image", "value": "${{ secrets.DOCKERHUB_USERNAME }}/youtube-blog-converter:${{ github.sha }}", "short": false},
              {"title": "Application URL", "value": "${{ steps.get-inputs.outputs.app_url }}", "short": false},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

  # 🔄 AUTOMATIC ROLLBACK ON FAILURE
  rollback-on-failure:
    needs: [deploy-green-environment, blue-green-traffic-switch]
    if: failure()
    runs-on: ubuntu-latest
    
    steps:
      - name: Show rollback trigger
        run: |
          echo "🚨 ROLLBACK TRIGGERED"
          echo "GREEN deployment status: ${{ needs.deploy-green-environment.result }}"
          echo "Traffic switch status: ${{ needs.blue-green-traffic-switch.result }}"

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Identify Rollback Target
        id: rollback-target
        run: |
          echo "🔍 Identifying rollback target..."
          
          # Try to get GREEN revision from outputs, fallback to manual search
          GREEN_REVISION="${{ needs.deploy-green-environment.outputs.green-revision }}"
          
          if [ -z "$GREEN_REVISION" ]; then
            echo "⚠️ GREEN revision not found in outputs, searching manually..."
            GREEN_REVISION=$(az containerapp revision list \
              --name ${{ secrets.CONTAINER_APP_NAME }} \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --query "[?starts_with(name, '${{ secrets.CONTAINER_APP_NAME }}--green-')] | [0].name" \
              --output tsv)
          fi
          
          echo "GREEN revision to exclude: $GREEN_REVISION"
          
          # Get the previous stable revision (excluding the failed green one)
          ROLLBACK_REVISION=$(az containerapp revision list \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --query "[?properties.active && name != '$GREEN_REVISION'] | [0].name" \
            --output tsv)
          
          if [ -z "$ROLLBACK_REVISION" ] || [ "$ROLLBACK_REVISION" = "null" ]; then
            echo "❌ No suitable rollback revision found"
            echo "📋 Available revisions:"
            az containerapp revision list \
              --name ${{ secrets.CONTAINER_APP_NAME }} \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --query "[].{name: name, active: properties.active, traffic: properties.trafficWeight}" \
              --output table
            exit 1
          fi
          
          echo "rollback_revision=$ROLLBACK_REVISION" >> $GITHUB_OUTPUT
          echo "🔄 Rollback target identified: $ROLLBACK_REVISION"

      - name: Execute Rollback
        run: |
          echo "🔄 Executing rollback to BLUE environment..."
          echo "Rolling back to: ${{ steps.rollback-target.outputs.rollback_revision }}"
          
          # Switch traffic back to previous stable revision
          az containerapp ingress traffic set \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --revision-weight ${{ steps.rollback-target.outputs.rollback_revision }}=100 \
            --output table
          
          echo "✅ Rollback traffic switch completed"

      - name: Verify Rollback
        run: |
          echo "🔍 Verifying rollback..."
          
          # Get app URL
          URL=$(az containerapp show \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --query "properties.configuration.ingress.fqdn" \
            --output tsv)
          
          if [ -z "$URL" ] || [ "$URL" = "null" ]; then
            echo "❌ Failed to get app URL for verification"
            exit 1
          fi
          
          ROLLBACK_URL="https://${URL}"
          echo "Verifying rollback URL: $ROLLBACK_URL"
          
          # Wait for rollback to take effect
          sleep 30
          
          for i in {1..5}; do
            echo "🔍 Rollback verification attempt $i/5..."
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" --max-time 30 "$ROLLBACK_URL" || echo "000")
            
            if [ "$HTTP_STATUS" = "200" ] || [ "$HTTP_STATUS" = "201" ] || [ "$HTTP_STATUS" = "302" ]; then
              echo "✅ Rollback verification passed! (Status: $HTTP_STATUS)"
              break
            else
              echo "⚠️ Rollback verification failed (Status: $HTTP_STATUS, attempt $i/5)"
              if [ $i -eq 5 ]; then
                echo "❌ Rollback verification failed - manual intervention required"
                exit 1
              fi
              sleep 15
            fi
          done

      - name: Update Labels After Rollback
        run: |
          echo "🏷️ Updating labels after rollback..."
          
          # Remove labels from failed green revision (with --yes flag)
          az containerapp revision label remove \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --label green \
            --yes || true
          
          # Ensure blue label is on the rollback revision (with --yes flag)
          az containerapp revision label add \
            --name ${{ secrets.CONTAINER_APP_NAME }} \
            --resource-group ${{ secrets.RESOURCE_GROUP }} \
            --label blue \
            --revision ${{ steps.rollback-target.outputs.rollback_revision }} \
            --yes || true
          
          echo "✅ Labels updated after rollback"

      - name: Deactivate Failed Green Revision
        run: |
          echo "🗑️ Deactivating failed GREEN revision..."
          
          GREEN_REVISION="${{ needs.deploy-green-environment.outputs.green-revision }}"
          if [ -n "$GREEN_REVISION" ] && [ "$GREEN_REVISION" != "null" ]; then
            az containerapp revision deactivate \
              --resource-group ${{ secrets.RESOURCE_GROUP }} \
              --revision "$GREEN_REVISION" || true
            echo "✅ Failed GREEN revision deactivated: $GREEN_REVISION"
          fi

      - name: Rollback Summary
        run: |
          echo "🔄 ROLLBACK COMPLETED"
          echo "======================================"
          echo "✅ Traffic rolled back to stable version"
          echo "✅ Failed GREEN revision deactivated"
          echo "✅ System restored to previous state"
          echo ""
          echo "📊 Rollback Details:"
          echo "Container App: ${{ secrets.CONTAINER_APP_NAME }}"
          echo "Rollback Revision: ${{ steps.rollback-target.outputs.rollback_revision }}"
          echo "Failed GREEN Revision: ${{ needs.deploy-green-environment.outputs.green-revision }}"
          echo "Commit that failed: ${{ github.sha }}"

      - name: Create Rollback Issue
        uses: actions/github-script@v7
        with:
          script: |
            try {
              const assignee = "${{ github.actor }}";
              const authorName = "${{ github.event.head_commit.author.name }}";
              const authorEmail = "${{ github.event.head_commit.author.email }}";
              
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: `🔄 Automatic Rollback Executed - Deployment Failed`,
                body: `### 🔄 Automatic Rollback Executed\n\n` +
                      `**Trigger:** Blue-Green deployment failure\n` +
                      `**Commit:** [${context.sha.substring(0,7)}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/commit/${context.sha})\n` +
                      `**Workflow:** [${context.workflow}](${context.serverUrl}/${context.repo.owner}/${context.repo.repo}/actions/runs/${context.runId})\n\n` +
                      `**Commit Author:** ${authorName} (${authorEmail})\n\n` +
                      `**Container App:** ${{ secrets.CONTAINER_APP_NAME }}\n` +
                      `**Failed GREEN Revision:** ${{ needs.deploy-green-environment.outputs.green-revision }}\n` +
                      `**Rollback Target:** ${{ steps.rollback-target.outputs.rollback_revision }}\n\n` +
                      `### What Happened\n` +
                      `The blue-green deployment failed and an automatic rollback was executed. ` +
                      `The system has been restored to the previous stable state.\n\n` +
                      `### Next Steps\n` +
                      `1. Review the failed deployment logs\n` +
                      `2. Fix the issues in the code\n` +
                      `3. Test locally before next deployment\n` +
                      `4. Monitor the application for stability`,
                assignees: [assignee],
                labels: ['rollback', 'blue-green-deployment', 'urgent', 'production']
              });
            } catch (error) {
              console.error('Error creating rollback issue:', error);
              core.setFailed(`Failed to create rollback issue: ${error.message}`);
            }

      - name: Slack Rollback Notification
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: 'warning'
          text: "🔄 Automatic Rollback Executed in ${{ github.repository }}"
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Container App", "value": "${{ secrets.CONTAINER_APP_NAME }}", "short": true},
              {"title": "Failed GREEN", "value": "${{ needs.deploy-green-environment.outputs.green-revision }}", "short": false},
              {"title": "Rollback Target", "value": "${{ steps.rollback-target.outputs.rollback_revision }}", "short": false},
              {"title": "Failed Commit", "value": "${{ github.sha }}", "short": true},
              {"title": "Status", "value": "System restored to stable state", "short": false}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run>"

    # 📊 FINAL NOTIFICATION
  notify:
    name: Pipeline Status Notification
    if: always()
    runs-on: ubuntu-latest
    needs: 
      - security-scan
      - build-and-test
      - sonarqube-scan
      - docker-build-test
      - owasp-zap-dast
      - deploy-to-dockerhub
      - deploy-green-environment
      - blue-green-traffic-switch
      - rollback-on-failure
    steps:
      - name: Aggregate job statuses
        id: status
        run: |
          failed_jobs=""
          successful_jobs=""
          skipped_jobs=""
          rollback_executed="false"

          # Check each job status
          if [[ "${{ needs.security-scan.result }}" == 'failure' ]]; then 
            failed_jobs+="Security Scan, "
          elif [[ "${{ needs.security-scan.result }}" == 'success' ]]; then
            successful_jobs+="Security Scan, "
          else
            skipped_jobs+="Security Scan, "
          fi

          if [[ "${{ needs.build-and-test.result }}" == 'failure' ]]; then 
            failed_jobs+="Build and Test, "
          elif [[ "${{ needs.build-and-test.result }}" == 'success' ]]; then
            successful_jobs+="Build and Test, "
          else
            skipped_jobs+="Build and Test, "
          fi

          if [[ "${{ needs.sonarqube-scan.result }}" == 'failure' ]]; then 
            failed_jobs+="SonarQube Scan, "
          elif [[ "${{ needs.sonarqube-scan.result }}" == 'success' ]]; then
            successful_jobs+="SonarQube Scan, "
          else
            skipped_jobs+="SonarQube Scan, "
          fi

          if [[ "${{ needs.docker-build-test.result }}" == 'failure' ]]; then 
            failed_jobs+="Docker Build, "
          elif [[ "${{ needs.docker-build-test.result }}" == 'success' ]]; then
            successful_jobs+="Docker Build, "
          else
            skipped_jobs+="Docker Build, "
          fi

          if [[ "${{ needs.owasp-zap-dast.result }}" == 'failure' ]]; then 
            failed_jobs+="OWASP ZAP DAST Security Scan, "
          elif [[ "${{ needs.owasp-zap-dast.result }}" == 'success' ]]; then
            successful_jobs+="OWASP ZAP DAST Security Scan, "
          else
            skipped_jobs+="OWASP ZAP DAST Security Scan, "
          fi

          if [[ "${{ needs.deploy-to-dockerhub.result }}" == 'failure' ]]; then 
            failed_jobs+="Docker Hub Deployment, "
          elif [[ "${{ needs.deploy-to-dockerhub.result }}" == 'success' ]]; then
            successful_jobs+="Docker Hub Deployment, "
          else
            skipped_jobs+="Docker Hub Deployment, "
          fi

          if [[ "${{ needs.deploy-green-environment.result }}" == 'failure' ]]; then 
            failed_jobs+="GREEN Environment Deploy, "
          elif [[ "${{ needs.deploy-green-environment.result }}" == 'success' ]]; then
            successful_jobs+="GREEN Environment Deploy, "
          else
            skipped_jobs+="GREEN Environment Deploy, "
          fi

          if [[ "${{ needs.blue-green-traffic-switch.result }}" == 'failure' ]]; then 
            failed_jobs+="Blue-Green Traffic Switch, "
          elif [[ "${{ needs.blue-green-traffic-switch.result }}" == 'success' ]]; then
            successful_jobs+="Blue-Green Traffic Switch, "
          else
            skipped_jobs+="Blue-Green Traffic Switch, "
          fi

          if [[ "${{ needs.rollback-on-failure.result }}" == 'success' ]]; then
            rollback_executed="true"
            successful_jobs+="Automatic Rollback, "
          elif [[ "${{ needs.rollback-on-failure.result }}" == 'failure' ]]; then
            failed_jobs+="Automatic Rollback, "
          fi

          # Clean up trailing commas
          failed_jobs=${failed_jobs%, }
          successful_jobs=${successful_jobs%, }
          skipped_jobs=${skipped_jobs%, }

          echo "failed_jobs=$failed_jobs" >> $GITHUB_OUTPUT
          echo "successful_jobs=$successful_jobs" >> $GITHUB_OUTPUT
          echo "skipped_jobs=$skipped_jobs" >> $GITHUB_OUTPUT
          echo "rollback_executed=$rollback_executed" >> $GITHUB_OUTPUT
          
          # Determine overall status
          if [ "$rollback_executed" = "true" ]; then
            echo "overall_status=rollback" >> $GITHUB_OUTPUT
          elif [ -n "$failed_jobs" ]; then
            echo "overall_status=failure" >> $GITHUB_OUTPUT
          elif [ -n "$successful_jobs" ]; then
            echo "overall_status=success" >> $GITHUB_OUTPUT
          else
            echo "overall_status=skipped" >> $GITHUB_OUTPUT
          fi

      - name: Send Slack notification
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: ${{ job.status }}
          text: |
            ${{
              steps.status.outputs.overall_status == 'success' && '✅ Blue-Green Deployment Pipeline Succeeded (with DAST Security Validation)!' ||
              steps.status.outputs.overall_status == 'rollback' && '🔄 Pipeline Failed - Automatic Rollback Executed!' ||
              steps.status.outputs.overall_status == 'failure' && '❌ Pipeline Failed!' ||
              '⚠️ Pipeline Skipped!'
            }}
          fields: |
            [
              {"title": "Repository", "value": "${{ github.repository }}", "short": true},
              {"title": "Workflow", "value": "${{ github.workflow }}", "short": true},
              {"title": "Run ID", "value": "${{ github.run_id }}", "short": true},
              {"title": "Commit", "value": "${{ github.sha }}", "short": true},
              {"title": "Triggered by", "value": "${{ github.actor }}", "short": true},
              {"title": "Security Testing", "value": "OWASP ZAP DAST + Static Analysis", "short": true}
            ]
          footer: "<${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}|View Run Details>"

      - name: Send Success Details
        if: steps.status.outputs.successful_jobs != ''
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: 'success'
          text: "✅ Successful Jobs Details"
          fields: |
            [
              {"title": "Successful Jobs", "value": "${{ steps.status.outputs.successful_jobs }}", "short": false}
            ]

      - name: Send Failure Details
        if: steps.status.outputs.failed_jobs != ''
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: 'failure'
          text: "❌ Failed Jobs Details"
          fields: |
            [
              {"title": "Failed Jobs", "value": "${{ steps.status.outputs.failed_jobs }}", "short": false}
            ]

      - name: Send Skipped Details
        if: steps.status.outputs.skipped_jobs != ''
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: 'warning'
          text: "⏭️ Skipped Jobs Details"
          fields: |
            [
              {"title": "Skipped Jobs", "value": "${{ steps.status.outputs.skipped_jobs }}", "short": false}
            ]

      - name: Send Rollback Details
        if: steps.status.outputs.rollback_executed == 'true'
        uses: act10ns/slack@v2.1.0
        with:
          channel: '#githubaction'
          status: 'warning'
          text: "🔄 Rollback Executed"
          fields: |
            [
              {"title": "Rollback Status", "value": "✅ System restored to stable state", "short": false}
            ]

