import os
import tempfile
import pytest
from unittest.mock import Mock, patch, MagicMock
from flask import Flask
import sys
from pathlib import Path

# Add src to path for imports
sys.path.insert(0, str(Path(__file__).resolve().parent.parent))

@pytest.fixture
def mock_env_vars():
    """Mock environment variables"""
    with patch.dict(os.environ, {
        'OPENAI_API_KEY': 'test-api-key',
        'FLASK_SECRET_KEY': 'test-secret-key',
        'OTLP_ENDPOINT': 'localhost:4317',
        'ENVIRONMENT': 'test'
    }):
        yield

@pytest.fixture
def mock_openai_client():
    """Mock OpenAI client"""
    with patch('openai.OpenAI') as mock_client:
        mock_response = Mock()
        mock_response.choices = [Mock()]
        mock_response.choices[0].message.content = "Test blog content generated by AI"
        
        mock_instance = Mock()
        mock_instance.chat.completions.create.return_value = mock_response
        mock_client.return_value = mock_instance
        yield mock_instance

@pytest.fixture
def mock_youtube_transcript():
    """Mock YouTube transcript API"""
    with patch('youtube_transcript_api.YouTubeTranscriptApi') as mock_api:
        mock_transcript = Mock()
        mock_transcript.fetch.return_value = [
            {'text': 'Hello everyone', 'start': 0.0, 'duration': 2.0},
            {'text': 'Welcome to this video', 'start': 2.0, 'duration': 3.0},
            {'text': 'Today we will discuss', 'start': 5.0, 'duration': 3.0}
        ]
        
        mock_transcript_list = Mock()
        mock_transcript_list.find_transcript.return_value = mock_transcript
        mock_transcript_list.find_generated_transcript.return_value = mock_transcript
        mock_api.list_transcripts.return_value = mock_transcript_list
        yield mock_api

@pytest.fixture
def sample_youtube_url():
    """Sample YouTube URL for testing"""
    return "https://www.youtube.com/watch?v=dQw4w9WgXcQ"

@pytest.fixture
def sample_transcript():
    """Sample transcript content"""
    return "Hello everyone, welcome to this video. Today we will discuss important topics about technology and innovation. This video explains various concepts in detail."

@pytest.fixture
def sample_blog_content():
    """Sample blog content"""
    return """# Test Blog Article

## Introduction
This is a test blog article generated from a YouTube video transcript.

## Main Content
The video discusses various important topics related to technology and innovation.

## Conclusion
This concludes our discussion on the topic."""

@pytest.fixture
def app_instance(mock_env_vars):
    """Create Flask app instance for testing"""
    # Mock telemetry initialization to avoid actual connections
    with patch('app.init_telemetry'), \
         patch('app.start_http_server'), \
         patch('app.FlaskInstrumentor'):
        
        from app import app
        app.config['TESTING'] = True
        app.config['SECRET_KEY'] = 'test-secret'
        app.config['SESSION_TYPE'] = 'filesystem'
        
        # Create temporary session directory
        temp_dir = tempfile.mkdtemp()
        app.config['SESSION_FILE_DIR'] = temp_dir
        
        yield app

@pytest.fixture
def client(app_instance):
    """Create test client"""
    return app_instance.test_client()

@pytest.fixture
def mock_crew():
    """Mock CrewAI components"""
    with patch('src.main.Crew') as mock_crew_class:
        mock_crew_instance = Mock()
        mock_crew_instance.kickoff.return_value = Mock(raw="Generated blog content")
        mock_crew_class.return_value = mock_crew_instance
        yield mock_crew_instance

@pytest.fixture
def mock_pdf_generator():
    """Mock PDF generator"""
    with patch('src.tool.PDFGeneratorTool') as mock_pdf:
        mock_instance = Mock()
        mock_instance.generate_pdf_bytes.return_value = b"PDF content"
        mock_pdf.return_value = mock_instance
        yield mock_instance
